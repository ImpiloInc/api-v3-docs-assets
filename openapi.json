{
  "openapi" : "3.0.0",
  "info" : {
    "title" : "Impilo API",
    "version" : "3.0"
  },
  "servers" : [ {
    "url" : "https://app.impiloplatform.com",
    "description" : "Production server"
  }, {
    "url" : "https://staging.impiloplatform.com",
    "description" : "Staging server"
  } ],
  "security" : [ {
    "ApiKeyAuth" : [ ]
  } ],
  "tags" : [ {
    "name" : "Devices"
  }, {
    "name" : "Items"
  }, {
    "name" : "Kits"
  }, {
    "name" : "Manufacturers"
  }, {
    "name" : "Orders"
  }, {
    "name" : "Patients"
  }, {
    "name" : "Sites"
  }, {
    "name" : "Webhooks"
  }, {
    "name" : "Readings - Blood Glucose"
  }, {
    "name" : "Readings - Blood Oxygen"
  }, {
    "name" : "Readings - Blood Pressure"
  }, {
    "name" : "Readings - Temperature"
  }, {
    "name" : "Readings - Weight"
  } ],
  "paths" : {
    "/api/v3/device" : {
      "get" : {
        "tags" : [ "Devices" ],
        "description" : "This endpoint returns a paginated list of all devices associated with the customer.\n\nYou can filter by the following parameters as query params:\n- page (integer) -- The page number of the content returned.\n- size (integer) -- The size of the page of content returned.\n- itemId (long) -- Lists only devices with the provided Item ID type.\n- manufacturerId (long) -- Lists only devices created by the Manufacturer ID provided.\n",
        "operationId" : "listDevices",
        "parameters" : [ {
          "name" : "itemId",
          "in" : "query",
          "schema" : {
            "format" : "int64",
            "type" : "integer"
          }
        }, {
          "name" : "manufacturerId",
          "in" : "query",
          "schema" : {
            "format" : "int64",
            "type" : "integer"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "schema" : {
            "format" : "int32",
            "type" : "integer"
          }
        }, {
          "name" : "size",
          "in" : "query",
          "schema" : {
            "format" : "int32",
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PageDevice"
                },
                "examples" : {
                  "listDevicesResponse" : {
                    "value" : {
                      "content" : [ {
                        "id" : 3,
                        "item" : {
                          "id" : 1,
                          "manufacturer" : {
                            "id" : 2,
                            "name" : "Custom Manufacturer"
                          },
                          "name" : "Blood Pressure Monitor",
                          "model" : "iBloodPressureMonitor123",
                          "sku" : "0000001"
                        },
                        "currentStatus" : "withPatient",
                        "currentPatient" : {
                          "id" : 456,
                          "externalIdentifier" : "external-identifier-123",
                          "firstName" : "John",
                          "lastName" : "Doe",
                          "dateOfBirth" : "01-01-2000",
                          "email" : "email@example.com",
                          "phoneNumber" : "111-222-3333",
                          "address" : {
                            "lineOne" : "1234 Market Street",
                            "lineTwo" : "Suite 110",
                            "city" : "Philadelphia",
                            "state" : "PA",
                            "zipCode" : "19137",
                            "country" : "USA"
                          },
                          "sex" : "unknown"
                        },
                        "deviceIdentifiers" : [ {
                          "type" : "serial",
                          "value" : "abc"
                        } ]
                      } ],
                      "page" : 1,
                      "size" : 15,
                      "total" : 1,
                      "first" : true,
                      "last" : true
                    }
                  }
                }
              }
            }
          }
        },
        "x-response-example" : "listDevicesResponse"
      }
    },
    "/api/v3/device/associate-patient" : {
      "patch" : {
        "tags" : [ "Devices" ],
        "description" : "This endpoint associates the device to the patient provided in the Request body.\n\nIn order to associate a device with a patient, all of the following must apply:\n- The Patient must be associated with the Customer making the request\n- The Device must be owned by the Customer making the request\n- The Device must be associated with a non-Impilo site\n- The Device must have a curent status of \"availableAtSite\"\n***\nFor more information see the [AssociateDeviceRequest Model](/resources/models#schema_AssociateDeviceRequest).",
        "operationId" : "associateDevice",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AssociateDeviceRequest"
              },
              "examples" : {
                "associateDeviceRequest" : {
                  "value" : {
                    "deviceId" : 1,
                    "patientExternalIdentifier" : "external-identifier"
                  }
                }
              }
            }
          }
        },
        "responses" : {
          "204" : {
            "description" : "No Content"
          }
        },
        "x-request-example" : "associateDeviceRequest",
        "externalDocs" : {
          "url" : "https://docs.impiloplatform.com/resources/models#schema_AssociateDeviceRequest"
        }
      }
    },
    "/api/v3/device/disassociate-patient" : {
      "patch" : {
        "tags" : [ "Devices" ],
        "description" : "This endpoint disassociates the device from the patient provided in the Request body.\n\nIn order to disassociate a device from a patient, all of the following must apply:\n- The Patient must be associated with the Customer making the request\n- The Device must be owned by the Customer making the request\n- The Device must already be associated with the provided Patient\n- The Device must be associated with a non-Impilo site\n- The Device must have a curent status of \"withPatient\"\n***\nFor more information see the [AssociateDeviceRequest Model](/resources/models#schema_AssociateDeviceRequest).",
        "operationId" : "disassociateDevice",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AssociateDeviceRequest"
              },
              "examples" : {
                "disassociateDeviceRequest" : {
                  "value" : {
                    "deviceId" : 1,
                    "patientExternalIdentifier" : "external-identifier"
                  }
                }
              }
            }
          }
        },
        "responses" : {
          "204" : {
            "description" : "No Content"
          }
        },
        "x-request-example" : "disassociateDeviceRequest",
        "externalDocs" : {
          "url" : "https://docs.impiloplatform.com/resources/models#schema_AssociateDeviceRequest"
        }
      }
    },
    "/api/v3/device/validate/{deviceIdentifier}" : {
      "get" : {
        "tags" : [ "Devices" ],
        "description" : "This endpoint validates that a Device Identifier exists and returns the Device upon matching. On failure, it indicates that the Identifier is not valid.\n",
        "operationId" : "validateDevice",
        "parameters" : [ {
          "name" : "deviceIdentifier",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ValidateDeviceResponse"
                },
                "examples" : {
                  "validateDeviceResponse" : {
                    "value" : {
                      "valid" : true,
                      "device" : {
                        "id" : 3,
                        "item" : {
                          "id" : 1,
                          "manufacturer" : {
                            "id" : 2,
                            "name" : "Custom Manufacturer"
                          },
                          "name" : "Blood Pressure Monitor",
                          "model" : "iBloodPressureMonitor123",
                          "sku" : "0000001"
                        },
                        "currentStatus" : "withPatient",
                        "currentPatient" : {
                          "id" : 456,
                          "externalIdentifier" : "external-identifier-123",
                          "firstName" : "John",
                          "lastName" : "Doe",
                          "dateOfBirth" : "01-01-2000",
                          "email" : "email@example.com",
                          "phoneNumber" : "111-222-3333",
                          "address" : {
                            "lineOne" : "1234 Market Street",
                            "lineTwo" : "Suite 110",
                            "city" : "Philadelphia",
                            "state" : "PA",
                            "zipCode" : "19137",
                            "country" : "USA"
                          },
                          "sex" : "unknown"
                        },
                        "deviceIdentifiers" : [ {
                          "type" : "serial",
                          "value" : "abc"
                        } ]
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-response-example" : "validateDeviceResponse"
      }
    },
    "/api/v3/device/{deviceId}" : {
      "get" : {
        "tags" : [ "Devices" ],
        "description" : "This endpoint returns the Device specified by ID in the URL path.\n",
        "operationId" : "fetchDevice",
        "parameters" : [ {
          "name" : "deviceId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "format" : "int64",
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Device"
                },
                "examples" : {
                  "fetchDeviceResponse" : {
                    "value" : {
                      "id" : 3,
                      "item" : {
                        "id" : 1,
                        "manufacturer" : {
                          "id" : 2,
                          "name" : "Custom Manufacturer"
                        },
                        "name" : "Blood Pressure Monitor",
                        "model" : "iBloodPressureMonitor123",
                        "sku" : "0000001"
                      },
                      "currentStatus" : "withPatient",
                      "currentPatient" : {
                        "id" : 456,
                        "externalIdentifier" : "external-identifier-123",
                        "firstName" : "John",
                        "lastName" : "Doe",
                        "dateOfBirth" : "01-01-2000",
                        "email" : "email@example.com",
                        "phoneNumber" : "111-222-3333",
                        "address" : {
                          "lineOne" : "1234 Market Street",
                          "lineTwo" : "Suite 110",
                          "city" : "Philadelphia",
                          "state" : "PA",
                          "zipCode" : "19137",
                          "country" : "USA"
                        },
                        "sex" : "unknown"
                      },
                      "deviceIdentifiers" : [ {
                        "type" : "serial",
                        "value" : "abc"
                      } ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-response-example" : "fetchDeviceResponse"
      },
      "patch" : {
        "tags" : [ "Devices" ],
        "description" : "This endpoint updates details for a device identified by the device ID provided in the path. It supports various updates, including changing device status, and adding notes regarding the update.\n***\nFor more information see the [DeviceUpdate Model](/resources/models#schema_DeviceUpdate).",
        "operationId" : "updateDevice",
        "parameters" : [ {
          "name" : "deviceId",
          "in" : "path",
          "description" : "ID of the device to be updated",
          "required" : true,
          "schema" : {
            "format" : "int64",
            "type" : "integer"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DeviceUpdate"
              },
              "examples" : {
                "updateDeviceRequest" : {
                  "value" : {
                    "deviceStatus" : "decommissioned",
                    "note" : "Decommissioned device, patient relocated"
                  }
                }
              }
            }
          }
        },
        "responses" : {
          "204" : {
            "description" : "No Content"
          }
        },
        "x-request-example" : "updateDeviceRequest",
        "externalDocs" : {
          "url" : "https://docs.impiloplatform.com/resources/models#schema_DeviceUpdate"
        }
      }
    },
    "/api/v3/item" : {
      "get" : {
        "tags" : [ "Items" ],
        "description" : "This endpoint returns a paginated list of all items in a customer's catalog.\n\nYou can filter by the following parameters as query params:\n- page (integer) -- The page number of the content returned.\n- size (integer) -- The size of the page of content returned.\n- manufacturerId (long) -- Lists only items created by the Manufacturer ID provided.\n",
        "operationId" : "listItems",
        "parameters" : [ {
          "name" : "manufacturerId",
          "in" : "query",
          "schema" : {
            "format" : "int64",
            "type" : "integer"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "schema" : {
            "format" : "int32",
            "type" : "integer"
          }
        }, {
          "name" : "size",
          "in" : "query",
          "schema" : {
            "format" : "int32",
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PageItem"
                },
                "examples" : {
                  "listItemsResponse" : {
                    "value" : {
                      "content" : [ {
                        "id" : 1,
                        "manufacturer" : {
                          "id" : 2,
                          "name" : "Custom Manufacturer"
                        },
                        "name" : "Blood Pressure Monitor",
                        "model" : "iBloodPressureMonitor123",
                        "sku" : "0000001"
                      } ],
                      "page" : 1,
                      "size" : 15,
                      "total" : 1,
                      "first" : true,
                      "last" : true
                    }
                  }
                }
              }
            }
          }
        },
        "x-response-example" : "listItemsResponse"
      }
    },
    "/api/v3/item/{itemId}" : {
      "get" : {
        "tags" : [ "Items" ],
        "description" : "This endpoint returns the Item specified by ID in the URL path.\n",
        "operationId" : "fetchItem",
        "parameters" : [ {
          "name" : "itemId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "format" : "int64",
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Item"
                },
                "examples" : {
                  "fetchItemResponse" : {
                    "value" : {
                      "id" : 1,
                      "manufacturer" : {
                        "id" : 2,
                        "name" : "Custom Manufacturer"
                      },
                      "name" : "Blood Pressure Monitor",
                      "model" : "iBloodPressureMonitor123",
                      "sku" : "0000001"
                    }
                  }
                }
              }
            }
          }
        },
        "x-response-example" : "fetchItemResponse"
      }
    },
    "/api/v3/kit" : {
      "get" : {
        "tags" : [ "Kits" ],
        "description" : "This endpoint returns a paginated list of all kits belonging to a customer.\n\nYou can filter by the following parameters as query params:\n- page (integer) -- The page number of the content returned.\n- size (integer) -- The size of the page of content returned.\n- itemId (long) -- Shows only kits that contain the specified Item ID.\n- archived (bool) -- Shows kits that are/aren't archived, based on provided boolean value.\n",
        "operationId" : "listKits",
        "parameters" : [ {
          "name" : "archived",
          "in" : "query",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "itemId",
          "in" : "query",
          "schema" : {
            "format" : "int64",
            "type" : "integer"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "schema" : {
            "format" : "int32",
            "type" : "integer"
          }
        }, {
          "name" : "size",
          "in" : "query",
          "schema" : {
            "format" : "int32",
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PageKit"
                },
                "examples" : {
                  "listKitsResponse" : {
                    "value" : {
                      "content" : [ {
                        "id" : 123,
                        "name" : "Example Kit",
                        "archived" : false,
                        "kitItems" : [ {
                          "item" : {
                            "id" : 1,
                            "manufacturer" : {
                              "id" : 2,
                              "name" : "Custom Manufacturer"
                            },
                            "name" : "Blood Pressure Monitor",
                            "model" : "iBloodPressureMonitor123",
                            "sku" : "0000001"
                          },
                          "count" : 1
                        } ]
                      } ],
                      "page" : 1,
                      "size" : 15,
                      "total" : 1,
                      "first" : true,
                      "last" : true
                    }
                  }
                }
              }
            }
          }
        },
        "x-response-example" : "listKitsResponse"
      }
    },
    "/api/v3/kit/{kitId}" : {
      "get" : {
        "tags" : [ "Kits" ],
        "description" : "This endpoint returns the Kit specified by ID in the URL path.\n",
        "operationId" : "fetchKit",
        "parameters" : [ {
          "name" : "kitId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "format" : "int64",
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Kit"
                },
                "examples" : {
                  "fetchKitResponse" : {
                    "value" : {
                      "id" : 123,
                      "name" : "Example Kit",
                      "archived" : false,
                      "kitItems" : [ {
                        "item" : {
                          "id" : 1,
                          "manufacturer" : {
                            "id" : 2,
                            "name" : "Custom Manufacturer"
                          },
                          "name" : "Blood Pressure Monitor",
                          "model" : "iBloodPressureMonitor123",
                          "sku" : "0000001"
                        },
                        "count" : 1
                      } ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-response-example" : "fetchKitResponse"
      }
    },
    "/api/v3/manufacturer" : {
      "get" : {
        "tags" : [ "Manufacturers" ],
        "description" : "This endpoint returns a paginated list of all manufacturers in a customer's catalog.\n\nYou can filter by the following parameters as query params:\n- page (integer) -- The page number of the content returned.\n- size (integer) -- The size of the page of content returned.\n",
        "operationId" : "listManufacturers",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "schema" : {
            "format" : "int32",
            "type" : "integer"
          }
        }, {
          "name" : "size",
          "in" : "query",
          "schema" : {
            "format" : "int32",
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PageManufacturer"
                },
                "examples" : {
                  "listManufacturersResponse" : {
                    "value" : {
                      "content" : [ {
                        "id" : 2,
                        "name" : "Custom Manufacturer"
                      } ],
                      "page" : 1,
                      "size" : 15,
                      "total" : 1,
                      "first" : true,
                      "last" : true
                    }
                  }
                }
              }
            }
          }
        },
        "x-response-example" : "listManufacturersResponse"
      }
    },
    "/api/v3/manufacturer/{manufacturerId}" : {
      "get" : {
        "tags" : [ "Manufacturers" ],
        "description" : "This endpoint returns the Manufacturer specified by ID in the URL path.\n",
        "operationId" : "fetchManufacturer",
        "parameters" : [ {
          "name" : "manufacturerId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "format" : "int64",
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Manufacturer"
                },
                "examples" : {
                  "fetchManufacturerResponse" : {
                    "value" : {
                      "id" : 2,
                      "name" : "Custom Manufacturer"
                    }
                  }
                }
              }
            }
          }
        },
        "x-response-example" : "fetchManufacturerResponse"
      }
    },
    "/api/v3/order" : {
      "get" : {
        "tags" : [ "Orders" ],
        "operationId" : "listOrders",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "schema" : {
            "format" : "int32",
            "type" : "integer"
          }
        }, {
          "name" : "patientId",
          "in" : "query",
          "schema" : {
            "format" : "int64",
            "type" : "integer"
          }
        }, {
          "name" : "size",
          "in" : "query",
          "schema" : {
            "format" : "int32",
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PageOrder"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Orders" ],
        "description" : "This endpoint is for creating orders linked to either a patient or a site, with order content specified by item or kit IDs and an association with a patient or site ID. Optional attributes offer further customization, such as tracking through external order IDs.\\n\\nFor a comprehensive guide on utilizing this endpoint, including examples, required and optional attributes, and additional functionalities like listing and fetching orders, visit the [Order Management Guide](/guides/order-management).\n***\nFor more information see the [Order Model](/resources/models#schema_Order).",
        "operationId" : "createOrder",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Order"
              },
              "examples" : {
                "existing-patient-order" : {
                  "value" : {
                    "externalOrderIds" : [ "xyz_123_0", "xyz_123_1", "xyz_123_2", "xyz_123_3" ],
                    "patient" : {
                      "id" : 1234,
                      "sex" : "unknown"
                    },
                    "orderItems" : [ {
                      "item" : {
                        "id" : 1000
                      },
                      "count" : 10
                    }, {
                      "item" : {
                        "id" : 1001
                      },
                      "count" : 10
                    }, {
                      "item" : {
                        "id" : 1002
                      },
                      "count" : 10
                    }, {
                      "item" : {
                        "id" : 1003
                      },
                      "count" : 10
                    } ],
                    "orderKits" : [ {
                      "kit" : {
                        "id" : 1000
                      },
                      "count" : 10
                    }, {
                      "kit" : {
                        "id" : 1001
                      },
                      "count" : 10
                    }, {
                      "kit" : {
                        "id" : 1002
                      },
                      "count" : 10
                    }, {
                      "kit" : {
                        "id" : 1003
                      },
                      "count" : 10
                    } ]
                  }
                },
                "new-patient-order" : {
                  "value" : {
                    "externalOrderIds" : [ "xyz_123_0", "xyz_123_1", "xyz_123_2", "xyz_123_3" ],
                    "patient" : {
                      "firstName" : "Steven",
                      "lastName" : "Glansberg",
                      "email" : "steve.g@gmail.com",
                      "address" : {
                        "lineOne" : "123 Main Street",
                        "city" : "Anytown",
                        "state" : "PA",
                        "zipCode" : "19334"
                      },
                      "sex" : "unknown"
                    },
                    "orderItems" : [ {
                      "item" : {
                        "id" : 1000
                      },
                      "count" : 10
                    }, {
                      "item" : {
                        "id" : 1001
                      },
                      "count" : 10
                    }, {
                      "item" : {
                        "id" : 1002
                      },
                      "count" : 10
                    }, {
                      "item" : {
                        "id" : 1003
                      },
                      "count" : 10
                    } ],
                    "orderKits" : [ {
                      "kit" : {
                        "id" : 1000
                      },
                      "count" : 10
                    }, {
                      "kit" : {
                        "id" : 1001
                      },
                      "count" : 10
                    }, {
                      "kit" : {
                        "id" : 1002
                      },
                      "count" : 10
                    }, {
                      "kit" : {
                        "id" : 1003
                      },
                      "count" : 10
                    } ]
                  }
                },
                "site-order" : {
                  "value" : {
                    "externalOrderIds" : [ "xyz_123_0", "xyz_123_1", "xyz_123_2", "xyz_123_3" ],
                    "site" : {
                      "id" : 1234
                    },
                    "orderItems" : [ {
                      "item" : {
                        "id" : 1000
                      },
                      "count" : 10
                    }, {
                      "item" : {
                        "id" : 1001
                      },
                      "count" : 10
                    }, {
                      "item" : {
                        "id" : 1002
                      },
                      "count" : 10
                    }, {
                      "item" : {
                        "id" : 1003
                      },
                      "count" : 10
                    } ],
                    "orderKits" : [ {
                      "kit" : {
                        "id" : 1000
                      },
                      "count" : 10
                    }, {
                      "kit" : {
                        "id" : 1001
                      },
                      "count" : 10
                    }, {
                      "kit" : {
                        "id" : 1002
                      },
                      "count" : 10
                    }, {
                      "kit" : {
                        "id" : 1003
                      },
                      "count" : 10
                    } ]
                  }
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Order"
                }
              }
            }
          }
        },
        "x-request-example-existing-patient-order" : "createRequestExampleExistingPatientOrder",
        "x-request-example-new-patient-order" : "createRequestExampleNewPatientOrder",
        "x-request-example-site-order" : "createRequestExampleNewSiteOrder",
        "externalDocs" : {
          "url" : "https://docs.impiloplatform.com/resources/models#schema_Order"
        }
      }
    },
    "/api/v3/order/{orderId}" : {
      "get" : {
        "tags" : [ "Orders" ],
        "operationId" : "fetchOrder",
        "parameters" : [ {
          "name" : "orderId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "format" : "int64",
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Order"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Orders" ],
        "operationId" : "voidOrder",
        "parameters" : [ {
          "name" : "orderId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "format" : "int64",
            "type" : "integer"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "No Content"
          }
        }
      }
    },
    "/api/v3/patient" : {
      "get" : {
        "tags" : [ "Patients" ],
        "description" : "Retrieves a paginated list of patients. Optional parameters allow specifying the page number and page size.",
        "operationId" : "listPatients",
        "parameters" : [ {
          "name" : "archived",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "schema" : {
            "format" : "int32",
            "type" : "integer"
          }
        }, {
          "name" : "size",
          "in" : "query",
          "schema" : {
            "format" : "int32",
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PagePatient"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Patients" ],
        "description" : "Creates a new patient record with the provided details.\n***\nFor more information see the [Patient Model](/resources/models#schema_Patient).",
        "operationId" : "createPatient",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Patient"
              },
              "examples" : {
                "create-patient" : {
                  "value" : {
                    "id" : 1,
                    "externalIdentifier" : "1234abcd",
                    "firstName" : "John",
                    "lastName" : "Doe",
                    "dateOfBirth" : 315532800000,
                    "email" : "john.doe@example.com",
                    "phoneNumber" : "+1234567890",
                    "address" : {
                      "lineOne" : "123 Main St",
                      "lineTwo" : "Apt 4B",
                      "lineThree" : "",
                      "city" : "Springfield",
                      "state" : "IL",
                      "zipCode" : "62704",
                      "country" : "USA",
                      "note" : "Near the park"
                    },
                    "sex" : "male"
                  }
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Patient"
                }
              }
            }
          }
        },
        "x-request-example-create-patient" : "createPatientExample",
        "externalDocs" : {
          "url" : "https://docs.impiloplatform.com/resources/models#schema_Patient"
        }
      }
    },
    "/api/v3/patient/find-by-email" : {
      "post" : {
        "tags" : [ "Patients" ],
        "description" : "Fetches details of a specific patient by their email address, if exists.\n\nTo search, pass a JSON object in the Request Body with a single \"email\" attribute\n and the email to search for.\n",
        "operationId" : "fetchPatientByEmail",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Patient"
                }
              }
            }
          }
        },
        "x-request-example" : "fetchByEmailExample"
      }
    },
    "/api/v3/patient/{patientId}" : {
      "get" : {
        "tags" : [ "Patients" ],
        "description" : "Fetches details of a specific patient by their unique ID.",
        "operationId" : "fetchPatient",
        "parameters" : [ {
          "name" : "patientId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "format" : "int64",
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Patient"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Patients" ],
        "description" : "Updates an existing patient record with new details provided in the request body.\n***\nFor more information see the [Patient Model](/resources/models#schema_Patient).",
        "operationId" : "updatePatient",
        "parameters" : [ {
          "name" : "patientId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "format" : "int64",
            "type" : "integer"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Patient"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Patient"
                }
              }
            }
          }
        },
        "externalDocs" : {
          "url" : "https://docs.impiloplatform.com/resources/models#schema_Patient"
        }
      },
      "patch" : {
        "tags" : [ "Patients" ],
        "description" : "Applies a partial update to a patient's record, modifying only the fields provided in the request body.\n***\nFor more information see the [Patient Model](/resources/models#schema_Patient).",
        "operationId" : "patchPatient",
        "parameters" : [ {
          "name" : "patientId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "format" : "int64",
            "type" : "integer"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Patient"
              },
              "examples" : {
                "update-patient-email" : {
                  "value" : {
                    "id" : 1,
                    "email" : "new.email.address@example.com",
                    "sex" : "unknown"
                  }
                },
                "update-patient-external-identifier" : {
                  "value" : {
                    "id" : 1,
                    "externalIdentifier" : "id-abc-123",
                    "sex" : "unknown"
                  }
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Patient"
                }
              }
            }
          }
        },
        "x-request-example-update-patient-email" : "patchPatientEmailExample",
        "x-request-example-update-patient-external-identifier" : "patchPatientExternalIdentifierExample",
        "externalDocs" : {
          "url" : "https://docs.impiloplatform.com/resources/models#schema_Patient"
        }
      }
    },
    "/api/v3/site" : {
      "get" : {
        "tags" : [ "Sites" ],
        "description" : "Returns a paginated list of your sites.\n\nOptional query parameters:\n    - page (integer) -- The page number of the sites returned.\n    - size (integer) -- The number of sites returned per page.\n",
        "operationId" : "listSites",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "schema" : {
            "format" : "int32",
            "type" : "integer"
          }
        }, {
          "name" : "size",
          "in" : "query",
          "schema" : {
            "format" : "int32",
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PageSite"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Sites" ],
        "description" : "Creates a new site with the provided details.\n\nReturns the site.\n***\nFor more information see the [Site Model](/resources/models#schema_Site).",
        "operationId" : "createSite",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Site"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Site"
                }
              }
            }
          }
        },
        "externalDocs" : {
          "url" : "https://docs.impiloplatform.com/resources/models#schema_Site"
        }
      }
    },
    "/api/v3/site/{siteId}" : {
      "get" : {
        "tags" : [ "Sites" ],
        "description" : "Returns the site specified by the ID in the URL path.",
        "operationId" : "fetchSite",
        "parameters" : [ {
          "name" : "siteId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "format" : "int64",
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Site"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Sites" ],
        "description" : "Update the site specified by the ID in the URL path with a new site object.\n***\nFor more information see the [Site Model](/resources/models#schema_Site).",
        "operationId" : "updateSite",
        "parameters" : [ {
          "name" : "siteId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "format" : "int64",
            "type" : "integer"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Site"
              }
            }
          }
        },
        "responses" : {
          "204" : {
            "description" : "No Content"
          }
        },
        "externalDocs" : {
          "url" : "https://docs.impiloplatform.com/resources/models#schema_Site"
        }
      },
      "patch" : {
        "tags" : [ "Sites" ],
        "description" : "Partially update the site specified by the ID in the URL path with a new site object.",
        "operationId" : "patchSite",
        "parameters" : [ {
          "name" : "siteId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "format" : "int64",
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Site"
                }
              }
            }
          }
        }
      }
    },
    "/api/v3/webhook" : {
      "get" : {
        "tags" : [ "Webhooks" ],
        "description" : "This endpoint retrieves a paginated list of V3 webhooks that the associated Customer is subscribed to.\n",
        "operationId" : "listWebhooks",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "schema" : {
            "format" : "int32",
            "type" : "integer"
          }
        }, {
          "name" : "size",
          "in" : "query",
          "schema" : {
            "format" : "int32",
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PageWebhook"
                },
                "examples" : {
                  "ListWebhooksResponse" : {
                    "value" : {
                      "content" : [ {
                        "id" : 123,
                        "type" : "order.status",
                        "url" : "https://impilo.health"
                      } ],
                      "page" : 1,
                      "size" : 15,
                      "total" : 1,
                      "first" : true,
                      "last" : true
                    }
                  }
                }
              }
            }
          }
        },
        "x-response-example" : "ListWebhooksResponse"
      },
      "post" : {
        "tags" : [ "Webhooks" ],
        "description" : "This endpoint creates a V3 webhook subscription of the type provided in the ***type*** attribute of the Webhook object.\n> Note: This endpoint will create a V3 webhook -- you cannot view V3 webhooks from the V1 or V2 endpoints.\n***\nFor more information see the [Webhook Model](/resources/models#schema_Webhook).",
        "operationId" : "createWebhook",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Webhook"
              },
              "examples" : {
                "WebhookRequestExample" : {
                  "value" : {
                    "type" : "order.status",
                    "url" : "https://impilo.health"
                  }
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Webhook"
                },
                "examples" : {
                  "WebhookResponseExample" : {
                    "value" : {
                      "id" : 123,
                      "type" : "order.status",
                      "url" : "https://impilo.health"
                    }
                  }
                }
              }
            }
          }
        },
        "x-request-example" : "WebhookRequestExample",
        "x-response-example" : "WebhookResponseExample",
        "externalDocs" : {
          "url" : "https://docs.impiloplatform.com/resources/models#schema_Webhook"
        }
      }
    },
    "/api/v3/webhook-secret" : {
      "get" : {
        "tags" : [ "Webhooks" ],
        "description" : "Gets your Webhook Secret if it exists. Otherwise returns an error.\n",
        "operationId" : "fetchWebhookSecret",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/WebhookSecret"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Webhooks" ],
        "description" : "Creates a Webhook Secret to use with the Impilo Platform with the provides `secret`. The secret will be passed along as a header with\nWebhooks sent from Impilo.\n\nReturns an error if you already have a Webhook secret created.\n***\nFor more information see the [WebhookSecret Model](/resources/models#schema_WebhookSecret).",
        "operationId" : "createWebhookSecret",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/WebhookSecret"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/WebhookSecret"
                }
              }
            }
          }
        },
        "externalDocs" : {
          "url" : "https://docs.impiloplatform.com/resources/models#schema_WebhookSecret"
        }
      },
      "delete" : {
        "tags" : [ "Webhooks" ],
        "description" : "Deletes your Webhook secret if it exists.\n\nReturns an error if you don't have a secret configured.\n",
        "operationId" : "deleteWebhookSecret",
        "responses" : {
          "204" : {
            "description" : "No Content"
          }
        }
      },
      "patch" : {
        "tags" : [ "Webhooks" ],
        "description" : "Updates your Webhook Secret if it exists. Requires a `secret` parameter.\n\nReturns an error if you don't have a secret configured.\n***\nFor more information see the [WebhookSecret Model](/resources/models#schema_WebhookSecret).",
        "operationId" : "updateWebhookSecret",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/WebhookSecret"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/WebhookSecret"
                }
              }
            }
          }
        },
        "externalDocs" : {
          "url" : "https://docs.impiloplatform.com/resources/models#schema_WebhookSecret"
        }
      }
    },
    "/api/v3/webhook/logs" : {
      "get" : {
        "tags" : [ "Webhooks" ],
        "description" : "Retrieves a paginated list of webhook logs that record historical attempts to send webhook payloads to a customer's servers. This endpoint allows filtering logs based on webhook type, creation timestamp range, retry attempts range, last response status, last retry timestamp range, and pagination settings. It is useful for auditing and debugging purposes.",
        "operationId" : "listWebhookLogs",
        "parameters" : [ {
          "name" : "endLastRetryTimestamp",
          "in" : "query",
          "description" : "The maximum last retry timestamp",
          "schema" : {
            "$ref" : "#/components/schemas/Instant"
          }
        }, {
          "name" : "endTimestamp",
          "in" : "query",
          "description" : "The maximum timestamp (exclusive)",
          "schema" : {
            "$ref" : "#/components/schemas/Instant"
          }
        }, {
          "name" : "lastResponseStatus",
          "in" : "query",
          "description" : "The last response status",
          "schema" : {
            "type" : "array",
            "items" : {
              "format" : "int32",
              "type" : "integer"
            }
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "The number of the page to retrieve (1 based)",
          "schema" : {
            "format" : "int32",
            "type" : "integer"
          }
        }, {
          "name" : "retryAttemptsMax",
          "in" : "query",
          "description" : "The maximum retry attempts",
          "schema" : {
            "format" : "int32",
            "type" : "integer"
          }
        }, {
          "name" : "retryAttemptsMin",
          "in" : "query",
          "description" : "The minimum retry attempts",
          "schema" : {
            "format" : "int32",
            "type" : "integer"
          }
        }, {
          "name" : "size",
          "in" : "query",
          "description" : "The number of items per page",
          "schema" : {
            "format" : "int32",
            "type" : "integer"
          }
        }, {
          "name" : "startLastRetryTimestamp",
          "in" : "query",
          "description" : "The minimum last retry timestamp",
          "schema" : {
            "$ref" : "#/components/schemas/Instant"
          }
        }, {
          "name" : "startTimestamp",
          "in" : "query",
          "description" : "The minimum timestamp",
          "schema" : {
            "$ref" : "#/components/schemas/Instant"
          }
        }, {
          "name" : "webhookType",
          "in" : "query",
          "description" : "The webhook type",
          "schema" : {
            "$ref" : "#/components/schemas/WebhookType"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PageWebhookLog"
                }
              }
            }
          }
        }
      }
    },
    "/api/v3/webhook/{webhookId}" : {
      "get" : {
        "tags" : [ "Webhooks" ],
        "description" : "This endpoint retrieves a particular Webhook of a customer by the ID provided in the path.\n",
        "operationId" : "fetchWebhook",
        "parameters" : [ {
          "name" : "webhookId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "format" : "int64",
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Webhook"
                },
                "examples" : {
                  "fetchWebhooksResponse" : {
                    "value" : {
                      "id" : 123,
                      "type" : "order.status",
                      "url" : "https://impilo.health"
                    }
                  }
                }
              }
            }
          }
        },
        "x-response-example" : "fetchWebhooksResponse"
      },
      "delete" : {
        "tags" : [ "Webhooks" ],
        "description" : "This endpoint deletes the specified Webhook from the customer's subscriptions.\n",
        "operationId" : "deleteWebhook",
        "parameters" : [ {
          "name" : "webhookId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "format" : "int64",
            "type" : "integer"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "No Content"
          }
        }
      },
      "patch" : {
        "tags" : [ "Webhooks" ],
        "description" : "This endpoint updates the specified Webhook with a new URL provided in the request body.\n> Note: The provided URL must be different than the existing URL of the webhook or a 400 response will be returned.\n***\nFor more information see the [Webhook Model](/resources/models#schema_Webhook).",
        "operationId" : "patchWebhook",
        "parameters" : [ {
          "name" : "webhookId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "format" : "int64",
            "type" : "integer"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Webhook"
              },
              "examples" : {
                "updateWebhookRequestExample" : {
                  "value" : {
                    "url" : "https://impilo.health/new-url"
                  }
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Webhook"
                },
                "examples" : {
                  "updateWebhookResponseExample" : {
                    "value" : {
                      "id" : 123,
                      "type" : "order.status",
                      "url" : "https://impilo.health/new-url"
                    }
                  }
                }
              }
            }
          }
        },
        "x-request-example" : "updateWebhookRequestExample",
        "x-response-example" : "updateWebhookResponseExample",
        "externalDocs" : {
          "url" : "https://docs.impiloplatform.com/resources/models#schema_Webhook"
        }
      }
    },
    "/trigger/v3/webhook-retry" : {
      "post" : {
        "tags" : [ "Webhooks" ],
        "description" : "This endpoint is used to trigger retries for stored failed webhook requests.",
        "operationId" : "triggerRetries",
        "responses" : {
          "201" : {
            "description" : "Created"
          }
        }
      }
    },
    "/api/v3/blood-glucose-reading" : {
      "get" : {
        "tags" : [ "Readings - Blood Glucose" ],
        "description" : "This endpoint returns a paginated list of Blood Glucose Readings for the patients associated with a Customer.\n\nFiltering can be done by any of the following query parameters:\n- page (integer) -- The page number of the content returned.\n- size (integer) -- The size of the page of content returned.\n- patientId (long) -- The patient's Impilo identifier.\n- externalId (string) -- Any external identifier associated with this patient.\n- startTimestamp (string) -- An ISO-formatted string with an applicable timezone, such as 2024-01-25T13:50:50.0Z\n- endTimestamp (string) -- An ISO-formatted string with an applicable timezone, such as 2024-01-27T13:50:50.0Z\n",
        "operationId" : "listBloodGlucoseReadings",
        "parameters" : [ {
          "name" : "endTimestamp",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "externalIdentifier",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "schema" : {
            "format" : "int32",
            "type" : "integer"
          }
        }, {
          "name" : "patientId",
          "in" : "query",
          "schema" : {
            "format" : "int64",
            "type" : "integer"
          }
        }, {
          "name" : "size",
          "in" : "query",
          "schema" : {
            "format" : "int32",
            "type" : "integer"
          }
        }, {
          "name" : "startTimestamp",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PageBloodGlucoseReading"
                },
                "examples" : {
                  "listReadingResponse" : {
                    "value" : {
                      "content" : [ {
                        "id" : 123,
                        "patient" : {
                          "id" : 456,
                          "externalIdentifier" : "external-identifier-123",
                          "firstName" : "John",
                          "lastName" : "Doe",
                          "dateOfBirth" : "01-01-2000",
                          "email" : "email@example.com",
                          "phoneNumber" : "111-222-3333",
                          "address" : {
                            "lineOne" : "1234 Market Street",
                            "lineTwo" : "Suite 110",
                            "city" : "Philadelphia",
                            "state" : "PA",
                            "zipCode" : "19137",
                            "country" : "USA"
                          },
                          "sex" : "unknown"
                        },
                        "item" : {
                          "id" : 1,
                          "manufacturer" : {
                            "id" : 2,
                            "name" : "Custom Manufacturer"
                          },
                          "name" : "Blood Pressure Monitor",
                          "model" : "iBloodPressureMonitor123",
                          "sku" : "0000001"
                        },
                        "device" : {
                          "id" : 3,
                          "item" : {
                            "id" : 1,
                            "manufacturer" : {
                              "id" : 2,
                              "name" : "Custom Manufacturer"
                            },
                            "name" : "Blood Pressure Monitor",
                            "model" : "iBloodPressureMonitor123",
                            "sku" : "0000001"
                          },
                          "currentStatus" : "withPatient",
                          "currentPatient" : {
                            "id" : 456,
                            "externalIdentifier" : "external-identifier-123",
                            "firstName" : "John",
                            "lastName" : "Doe",
                            "dateOfBirth" : "01-01-2000",
                            "email" : "email@example.com",
                            "phoneNumber" : "111-222-3333",
                            "address" : {
                              "lineOne" : "1234 Market Street",
                              "lineTwo" : "Suite 110",
                              "city" : "Philadelphia",
                              "state" : "PA",
                              "zipCode" : "19137",
                              "country" : "USA"
                            },
                            "sex" : "unknown"
                          },
                          "deviceIdentifiers" : [ {
                            "type" : "serial",
                            "value" : "abc"
                          } ]
                        },
                        "readingTimestamp" : 1713205236000,
                        "glucose" : 88,
                        "manual" : false,
                        "beforeMeal" : false,
                        "afterMeal" : false
                      } ],
                      "page" : 1,
                      "size" : 15,
                      "total" : 1,
                      "first" : true,
                      "last" : true
                    }
                  }
                }
              }
            }
          }
        },
        "x-response-example" : "listReadingResponse"
      }
    },
    "/api/v3/blood-glucose-reading/export" : {
      "get" : {
        "tags" : [ "Readings - Blood Glucose" ],
        "description" : "Exports blood glucose readings for a specified patient within a given date range as either an Excel spreadsheet or a CSV file. This endpoint allows clients to specify a patient ID, and optional start and end dates to filter the readings by date. If no patient ID is provided, readings for all patients may be exported depending on the implementation. The 'excel' parameter determines the format of the export: if true, the data is returned in Excel format; otherwise, it is returned as CSV. The response is directly streamed to the client as either 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' for Excel or 'text/csv' for CSV format.\n",
        "operationId" : "exportBloodGlucoseReadings",
        "parameters" : [ {
          "name" : "end",
          "in" : "query",
          "description" : "The end date for filtering blood glucose readings. Only readings before this date will be included.",
          "schema" : {
            "$ref" : "#/components/schemas/Instant"
          }
        }, {
          "name" : "excel",
          "in" : "query",
          "description" : "Determines the format of the export: if true, the data is returned in Excel format; otherwise, it is returned as CSV.",
          "schema" : {
            "default" : false,
            "type" : "boolean"
          }
        }, {
          "name" : "patientId",
          "in" : "query",
          "description" : "The ID of the patient whose blood glucose readings are to be exported. If not provided, readings for all patients may be exported.",
          "schema" : {
            "format" : "int64",
            "type" : "integer"
          }
        }, {
          "name" : "start",
          "in" : "query",
          "description" : "The start date for filtering blood glucose readings. Only readings after or equal to this date will be included.",
          "schema" : {
            "$ref" : "#/components/schemas/Instant"
          }
        } ],
        "responses" : {
          "default" : {
            "content" : {
              "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" : {
                "schema" : {
                  "format" : "binary",
                  "type" : "string"
                }
              },
              "text/csv" : {
                "schema" : {
                  "format" : "binary",
                  "type" : "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/v3/blood-glucose-reading/{readingId}" : {
      "get" : {
        "tags" : [ "Readings - Blood Glucose" ],
        "description" : "This endpoint returns a specific blood glucose reading based on the reading identifier provided in the path.\n",
        "operationId" : "fetchBloodGlucoseReading",
        "parameters" : [ {
          "name" : "readingId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "format" : "int64",
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BloodGlucoseReading"
                },
                "examples" : {
                  "fetchReadingResponse" : {
                    "value" : {
                      "id" : 123,
                      "patient" : {
                        "id" : 456,
                        "externalIdentifier" : "external-identifier-123",
                        "firstName" : "John",
                        "lastName" : "Doe",
                        "dateOfBirth" : "01-01-2000",
                        "email" : "email@example.com",
                        "phoneNumber" : "111-222-3333",
                        "address" : {
                          "lineOne" : "1234 Market Street",
                          "lineTwo" : "Suite 110",
                          "city" : "Philadelphia",
                          "state" : "PA",
                          "zipCode" : "19137",
                          "country" : "USA"
                        },
                        "sex" : "unknown"
                      },
                      "item" : {
                        "id" : 1,
                        "manufacturer" : {
                          "id" : 2,
                          "name" : "Custom Manufacturer"
                        },
                        "name" : "Blood Pressure Monitor",
                        "model" : "iBloodPressureMonitor123",
                        "sku" : "0000001"
                      },
                      "device" : {
                        "id" : 3,
                        "item" : {
                          "id" : 1,
                          "manufacturer" : {
                            "id" : 2,
                            "name" : "Custom Manufacturer"
                          },
                          "name" : "Blood Pressure Monitor",
                          "model" : "iBloodPressureMonitor123",
                          "sku" : "0000001"
                        },
                        "currentStatus" : "withPatient",
                        "currentPatient" : {
                          "id" : 456,
                          "externalIdentifier" : "external-identifier-123",
                          "firstName" : "John",
                          "lastName" : "Doe",
                          "dateOfBirth" : "01-01-2000",
                          "email" : "email@example.com",
                          "phoneNumber" : "111-222-3333",
                          "address" : {
                            "lineOne" : "1234 Market Street",
                            "lineTwo" : "Suite 110",
                            "city" : "Philadelphia",
                            "state" : "PA",
                            "zipCode" : "19137",
                            "country" : "USA"
                          },
                          "sex" : "unknown"
                        },
                        "deviceIdentifiers" : [ {
                          "type" : "serial",
                          "value" : "abc"
                        } ]
                      },
                      "readingTimestamp" : 1713205236000,
                      "glucose" : 88,
                      "manual" : false,
                      "beforeMeal" : false,
                      "afterMeal" : false
                    }
                  }
                }
              }
            }
          }
        },
        "x-response-example" : "fetchReadingResponse"
      }
    },
    "/api/v3/blood-oxygen-reading" : {
      "get" : {
        "tags" : [ "Readings - Blood Oxygen" ],
        "description" : "Retrieves a paginated list of blood oxygen readings from the Impilo platform. Optional parameters can be used to filter the results by page number, page size, patient ID, external ID, start timestamp, and end timestamp.",
        "operationId" : "listBloodOxygenReadings",
        "parameters" : [ {
          "name" : "endTimestamp",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "externalIdentifier",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "schema" : {
            "format" : "int32",
            "type" : "integer"
          }
        }, {
          "name" : "patientId",
          "in" : "query",
          "schema" : {
            "format" : "int64",
            "type" : "integer"
          }
        }, {
          "name" : "size",
          "in" : "query",
          "schema" : {
            "format" : "int32",
            "type" : "integer"
          }
        }, {
          "name" : "startTimestamp",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PageBloodOxygenReading"
                }
              }
            }
          }
        }
      }
    },
    "/api/v3/blood-oxygen-reading/export" : {
      "get" : {
        "tags" : [ "Readings - Blood Oxygen" ],
        "description" : "Exports blood oxygen readings for a specified patient within a given date range as either an Excel spreadsheet or a CSV file. This endpoint facilitates the retrieval of blood oxygen data by allowing the specification of a patient ID and optional start and end dates to narrow down the readings. If no patient ID is specified, the service may return readings for all patients, contingent on the service's implementation details. The 'excel' parameter controls the output format: if set to true, the data is delivered in Excel format; if false, it is delivered in CSV format. The data is streamed directly to the client and can be consumed in the specified format.\n",
        "operationId" : "exportBloodOxygenReadings",
        "parameters" : [ {
          "name" : "end",
          "in" : "query",
          "description" : "The end date for filtering blood oxygen readings. Only readings before this date will be included.",
          "schema" : {
            "$ref" : "#/components/schemas/Instant"
          }
        }, {
          "name" : "excel",
          "in" : "query",
          "description" : "Determines the format of the export: if true, the data is returned in Excel format; otherwise, it is returned as CSV.",
          "schema" : {
            "default" : false,
            "type" : "boolean"
          }
        }, {
          "name" : "patientId",
          "in" : "query",
          "description" : "The ID of the patient whose blood oxygen readings are to be exported. If not provided, readings for all patients may be exported.",
          "schema" : {
            "format" : "int64",
            "type" : "integer"
          }
        }, {
          "name" : "start",
          "in" : "query",
          "description" : "The start date for filtering blood oxygen readings. Only readings after or equal to this date will be included.",
          "schema" : {
            "$ref" : "#/components/schemas/Instant"
          }
        } ],
        "responses" : {
          "default" : {
            "content" : {
              "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" : {
                "schema" : {
                  "format" : "binary",
                  "type" : "string"
                }
              },
              "text/csv" : {
                "schema" : {
                  "format" : "binary",
                  "type" : "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/v3/blood-oxygen-reading/{readingId}" : {
      "get" : {
        "tags" : [ "Readings - Blood Oxygen" ],
        "description" : "Fetches a specific Impilo blood oxygen reading by its ID.",
        "operationId" : "fetchBloodOxygenReading",
        "parameters" : [ {
          "name" : "readingId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "format" : "int64",
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BloodOxygenReading"
                }
              }
            }
          }
        }
      }
    },
    "/api/v3/blood-pressure-reading" : {
      "get" : {
        "tags" : [ "Readings - Blood Pressure" ],
        "description" : "Retrieves a paginated list of blood pressure readings from the Impilo platform. Optional parameters can be used to filter the results by page number, page size, patient ID, external ID, start timestamp, and end timestamp.",
        "operationId" : "listBloodPressureReadings",
        "parameters" : [ {
          "name" : "endTimestamp",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "externalIdentifier",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "schema" : {
            "format" : "int32",
            "minimum" : 1,
            "type" : "integer"
          }
        }, {
          "name" : "patientId",
          "in" : "query",
          "schema" : {
            "format" : "int64",
            "type" : "integer"
          }
        }, {
          "name" : "size",
          "in" : "query",
          "schema" : {
            "format" : "int32",
            "type" : "integer"
          }
        }, {
          "name" : "startTimestamp",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PageBloodPressureReading"
                }
              }
            }
          }
        }
      }
    },
    "/api/v3/blood-pressure-reading/export" : {
      "get" : {
        "tags" : [ "Readings - Blood Pressure" ],
        "description" : "Provides an export of blood pressure readings for a specified patient over a selected date range, available in either Excel or CSV format. Users can specify a patient ID to retrieve data for a particular individual, or leave the parameter empty to potentially export data for all patients, depending on service implementation. Optional start and end date parameters allow for filtering the data by the desired timeframe. The 'excel' flag determines the format of the output; when true, the data is exported in Excel format, otherwise, it is provided as a CSV file. The response consists of a direct stream of the chosen data format to the client.\n",
        "operationId" : "exportBloodPressureReadings",
        "parameters" : [ {
          "name" : "end",
          "in" : "query",
          "description" : "The end date for filtering blood pressure readings. Only readings before this date will be included.",
          "schema" : {
            "$ref" : "#/components/schemas/Instant"
          }
        }, {
          "name" : "excel",
          "in" : "query",
          "description" : "Determines the format of the export: if true, the data is returned in Excel format; otherwise, it is returned as CSV.",
          "schema" : {
            "default" : false,
            "type" : "boolean"
          }
        }, {
          "name" : "patientId",
          "in" : "query",
          "description" : "The ID of the patient whose blood pressure readings are to be exported. If not provided, readings for all patients may be exported.",
          "schema" : {
            "format" : "int64",
            "type" : "integer"
          }
        }, {
          "name" : "start",
          "in" : "query",
          "description" : "The start date for filtering blood pressure readings. Only readings after or equal to this date will be included.",
          "schema" : {
            "$ref" : "#/components/schemas/Instant"
          }
        } ],
        "responses" : {
          "default" : {
            "content" : {
              "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" : {
                "schema" : {
                  "format" : "binary",
                  "type" : "string"
                }
              },
              "text/csv" : {
                "schema" : {
                  "format" : "binary",
                  "type" : "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/v3/blood-pressure-reading/{readingId}" : {
      "get" : {
        "tags" : [ "Readings - Blood Pressure" ],
        "description" : "Fetches a specific Impilo blood pressure reading by its ID.",
        "operationId" : "fetchBloodPressureReading",
        "parameters" : [ {
          "name" : "readingId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "format" : "int64",
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BloodPressureReading"
                }
              }
            }
          }
        }
      }
    },
    "/api/v3/temperature-reading" : {
      "get" : {
        "tags" : [ "Readings - Temperature" ],
        "description" : "Retrieves a paginated list of temperature readings from the Impilo platform. Optional parameters can be used to filter the results by page number, page size, patient ID, external ID, start timestamp, and end timestamp.",
        "operationId" : "listTemperatureReadings",
        "parameters" : [ {
          "name" : "endTimestamp",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "externalIdentifier",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "schema" : {
            "format" : "int32",
            "type" : "integer"
          }
        }, {
          "name" : "patientId",
          "in" : "query",
          "schema" : {
            "format" : "int64",
            "type" : "integer"
          }
        }, {
          "name" : "size",
          "in" : "query",
          "schema" : {
            "format" : "int32",
            "type" : "integer"
          }
        }, {
          "name" : "startTimestamp",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PageTemperatureReading"
                }
              }
            }
          }
        }
      }
    },
    "/api/v3/temperature-reading/export" : {
      "get" : {
        "tags" : [ "Readings - Temperature" ],
        "description" : "Facilitates the export of temperature readings for a specified patient within a chosen date range, in either Excel or CSV format. This endpoint allows the selection of a patient ID for targeted data retrieval, or can provide readings for all patients if no specific ID is provided, subject to service implementation. The start and end dates are optional and can be used to filter the readings to a specific period. The 'excel' parameter decides the output format: setting this to true returns the data in Excel format, while false yields CSV format. The endpoint streams the output directly to the client in the specified format.\n",
        "operationId" : "exportTemperatureReadings",
        "parameters" : [ {
          "name" : "end",
          "in" : "query",
          "description" : "The end date for filtering temperature readings. Only readings before this date will be included.",
          "schema" : {
            "$ref" : "#/components/schemas/Instant"
          }
        }, {
          "name" : "excel",
          "in" : "query",
          "description" : "Determines the format of the export: if true, the data is returned in Excel format; otherwise, it is returned as CSV.",
          "schema" : {
            "default" : false,
            "type" : "boolean"
          }
        }, {
          "name" : "patientId",
          "in" : "query",
          "description" : "The ID of the patient whose temperature readings are to be exported. If not provided, readings for all patients may be exported.",
          "schema" : {
            "format" : "int64",
            "type" : "integer"
          }
        }, {
          "name" : "start",
          "in" : "query",
          "description" : "The start date for filtering temperature readings. Only readings after or equal to this date will be included.",
          "schema" : {
            "$ref" : "#/components/schemas/Instant"
          }
        } ],
        "responses" : {
          "default" : {
            "content" : {
              "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" : {
                "schema" : {
                  "format" : "binary",
                  "type" : "string"
                }
              },
              "text/csv" : {
                "schema" : {
                  "format" : "binary",
                  "type" : "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/v3/temperature-reading/{readingId}" : {
      "get" : {
        "tags" : [ "Readings - Temperature" ],
        "description" : "Fetches a specific Impilo temperature reading by its ID.",
        "operationId" : "fetchTemperatureReading",
        "parameters" : [ {
          "name" : "readingId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "format" : "int64",
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TemperatureReading"
                }
              }
            }
          }
        }
      }
    },
    "/api/v3/weight-reading" : {
      "get" : {
        "tags" : [ "Readings - Weight" ],
        "description" : "Retrieves a paginated list of weight readings from the Impilo platform. Optional parameters can be used to filter the results by page number, page size, patient ID, external ID, start timestamp, and end timestamp.",
        "operationId" : "listWeightReadings",
        "parameters" : [ {
          "name" : "endTimestamp",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "externalIdentifier",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "schema" : {
            "format" : "int32",
            "minimum" : 1,
            "type" : "integer"
          }
        }, {
          "name" : "patientId",
          "in" : "query",
          "schema" : {
            "format" : "int64",
            "type" : "integer"
          }
        }, {
          "name" : "size",
          "in" : "query",
          "schema" : {
            "format" : "int32",
            "type" : "integer"
          }
        }, {
          "name" : "startTimestamp",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PageWeightReading"
                }
              }
            }
          }
        }
      }
    },
    "/api/v3/weight-reading/export" : {
      "get" : {
        "tags" : [ "Readings - Weight" ],
        "description" : "Exports weight readings for a specified patient over a selected date range, available in either Excel or CSV format. This endpoint allows the specification of a patient ID, enabling the retrieval of weight data for an individual patient. Alternatively, if no patient ID is provided, it may export readings for all patients, dependent on the implementation details of the service. Users can also specify start and end dates to filter the export to a specific timeframe. The 'excel' parameter dictates the format of the output; if set to true, the readings are exported in Excel format, otherwise in CSV format\n",
        "operationId" : "exportWeightReadings",
        "parameters" : [ {
          "name" : "end",
          "in" : "query",
          "description" : "The end date for filtering weight readings. Only readings before this date will be included.",
          "schema" : {
            "$ref" : "#/components/schemas/Instant"
          }
        }, {
          "name" : "excel",
          "in" : "query",
          "description" : "Determines the format of the export: if true, the data is returned in Excel format; otherwise, it is returned as CSV.",
          "schema" : {
            "default" : false,
            "type" : "boolean"
          }
        }, {
          "name" : "patientId",
          "in" : "query",
          "description" : "The ID of the patient whose weight readings are to be exported. If not provided, readings for all patients may be exported.",
          "schema" : {
            "format" : "int64",
            "type" : "integer"
          }
        }, {
          "name" : "start",
          "in" : "query",
          "description" : "The start date for filtering weight readings. Only readings after or equal to this date will be included.",
          "schema" : {
            "$ref" : "#/components/schemas/Instant"
          }
        } ],
        "responses" : {
          "default" : {
            "content" : {
              "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" : {
                "schema" : {
                  "format" : "binary",
                  "type" : "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/v3/weight-reading/{readingId}" : {
      "get" : {
        "tags" : [ "Readings - Weight" ],
        "description" : "Fetches a specific Impilo weight reading by its ID.",
        "operationId" : "fetchWeightReading",
        "parameters" : [ {
          "name" : "readingId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "format" : "int64",
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/WeightReading"
                }
              }
            }
          }
        }
      }
    },
    "/api/v3/test/blood-glucose-webhook" : {
      "post" : {
        "description" : "Trigger a test blood glucose webhook\n***\nFor more information see the [TestBloodGlucoseWebhookRequest Model](/resources/models#schema_TestBloodGlucoseWebhookRequest).",
        "operationId" : "triggerBloodGlucoseWebhook",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TestBloodGlucoseWebhookRequest"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Created"
          }
        },
        "externalDocs" : {
          "url" : "https://docs.impiloplatform.com/resources/models#schema_TestBloodGlucoseWebhookRequest"
        }
      }
    },
    "/api/v3/test/blood-oxygen-webhook" : {
      "post" : {
        "description" : "Trigger a test blood oxygen webhook\n***\nFor more information see the [TestBloodOxygenWebhookRequest Model](/resources/models#schema_TestBloodOxygenWebhookRequest).",
        "operationId" : "triggerBloodOxygenWebhook",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TestBloodOxygenWebhookRequest"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Created"
          }
        },
        "externalDocs" : {
          "url" : "https://docs.impiloplatform.com/resources/models#schema_TestBloodOxygenWebhookRequest"
        }
      }
    },
    "/api/v3/test/blood-pressure-webhook" : {
      "post" : {
        "description" : "Trigger a test blood pressure webhook\n***\nFor more information see the [TestBloodPressureWebhookRequest Model](/resources/models#schema_TestBloodPressureWebhookRequest).",
        "operationId" : "triggerBloodPressureWebhook",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TestBloodPressureWebhookRequest"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Created"
          }
        },
        "externalDocs" : {
          "url" : "https://docs.impiloplatform.com/resources/models#schema_TestBloodPressureWebhookRequest"
        }
      }
    },
    "/api/v3/test/device-association-created" : {
      "post" : {
        "description" : "Trigger a test device association created webhook\n***\nFor more information see the [TestDeviceAssociationWebhook Model](/resources/models#schema_TestDeviceAssociationWebhook).",
        "operationId" : "triggerDeviceAssociationCreated",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TestDeviceAssociationWebhook"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Created"
          }
        },
        "externalDocs" : {
          "url" : "https://docs.impiloplatform.com/resources/models#schema_TestDeviceAssociationWebhook"
        }
      }
    },
    "/api/v3/test/device-association-removed" : {
      "post" : {
        "description" : "Trigger a test device association removed webhook\n***\nFor more information see the [TestDeviceAssociationWebhook Model](/resources/models#schema_TestDeviceAssociationWebhook).",
        "operationId" : "triggerDeviceAssociationRemoved",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TestDeviceAssociationWebhook"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Created"
          }
        },
        "externalDocs" : {
          "url" : "https://docs.impiloplatform.com/resources/models#schema_TestDeviceAssociationWebhook"
        }
      }
    },
    "/api/v3/test/order-status-full-webhook" : {
      "post" : {
        "description" : "Trigger a test order status full webhook\n***\nFor more information see the [TestOrderStatusFullWebhook Model](/resources/models#schema_TestOrderStatusFullWebhook).",
        "operationId" : "orderStatusFullWebhook",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TestOrderStatusFullWebhook"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Created"
          }
        },
        "externalDocs" : {
          "url" : "https://docs.impiloplatform.com/resources/models#schema_TestOrderStatusFullWebhook"
        }
      }
    },
    "/api/v3/test/order-status-webhook" : {
      "post" : {
        "description" : "Send a test order status webhook\n***\nFor more information see the [TestOrderStatusWebhookRequest Model](/resources/models#schema_TestOrderStatusWebhookRequest).",
        "operationId" : "triggerOrderStatusWebhook",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TestOrderStatusWebhookRequest"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Created"
          }
        },
        "externalDocs" : {
          "url" : "https://docs.impiloplatform.com/resources/models#schema_TestOrderStatusWebhookRequest"
        }
      }
    },
    "/api/v3/test/weight-webhook" : {
      "post" : {
        "description" : "Trigger a test weight webhook\n***\nFor more information see the [TestWeightWebhookRequest Model](/resources/models#schema_TestWeightWebhookRequest).",
        "operationId" : "triggerWeightWebhook",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TestWeightWebhookRequest"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Created"
          }
        },
        "externalDocs" : {
          "url" : "https://docs.impiloplatform.com/resources/models#schema_TestWeightWebhookRequest"
        }
      }
    }
  },
  "components" : {
    "securitySchemes" : {
      "ApiKeyAuth" : {
        "type" : "apiKey",
        "in" : "header",
        "name" : "Impilo-API-Key"
      }
    },
    "schemas" : {
      "Address" : {
        "description" : "Represents a physical address, including information such as street lines, city, state, zip code, country, and an optional note for additional details.",
        "type" : "object",
        "properties" : {
          "lineOne" : {
            "description" : "Address line one.",
            "type" : "string"
          },
          "lineTwo" : {
            "description" : "Address line two.",
            "type" : "string"
          },
          "lineThree" : {
            "description" : "Address line three.",
            "type" : "string"
          },
          "city" : {
            "description" : "Address city.",
            "type" : "string"
          },
          "state" : {
            "description" : "Address state.",
            "type" : "string"
          },
          "zipCode" : {
            "description" : "Address zip code.",
            "type" : "string"
          },
          "country" : {
            "description" : "Address country.",
            "type" : "string"
          },
          "note" : {
            "description" : "Address note.",
            "type" : "string"
          }
        }
      },
      "AssociateDeviceRequest" : {
        "type" : "object",
        "properties" : {
          "deviceId" : {
            "format" : "int64",
            "description" : "The ID of the device to be associated. Either this value or a Device Identifier are required to identify the Device to be (dis)associated.",
            "type" : "integer"
          },
          "patientId" : {
            "format" : "int64",
            "description" : "The ID of the patient to have the Device associated to. Either this value or a Patient External Identifier are required to identify who should be (dis)associated with the device.",
            "type" : "integer"
          },
          "deviceIdentifier" : {
            "description" : "The Identifier, such as a Serial Number, of the device to be (dis)associated. Either this value or a Device Id are required to identify the Device to be (dis)associated.",
            "type" : "string"
          },
          "patientExternalIdentifier" : {
            "description" : "The External Identifier of the patient to have the Device (dis)associated to. Either this value or a Patient Id are required to identify who should be (dis)associated with the device.",
            "type" : "string"
          }
        }
      },
      "BloodGlucoseReading" : {
        "description" : "This page describes Impilo's blood glucose reading model.",
        "type" : "object",
        "properties" : {
          "id" : {
            "format" : "int64",
            "description" : "Unique identifier for the reading.",
            "type" : "integer"
          },
          "patient" : {
            "description" : "The patient who took the reading.",
            "type" : "object",
            "allOf" : [ {
              "$ref" : "#/components/schemas/Patient"
            } ]
          },
          "item" : {
            "description" : "The item used to take the reading.",
            "type" : "object",
            "allOf" : [ {
              "$ref" : "#/components/schemas/Item"
            } ]
          },
          "device" : {
            "description" : "The device used to take the reading.",
            "type" : "object",
            "allOf" : [ {
              "$ref" : "#/components/schemas/Device"
            } ]
          },
          "readingTimestamp" : {
            "description" : "The timestamp at which the reading was taken.",
            "type" : "string"
          },
          "glucose" : {
            "format" : "int32",
            "description" : "The blood glucose measurement value.",
            "type" : "integer"
          },
          "manual" : {
            "description" : "True if the reading value was entered manually, false otherwise.",
            "type" : "boolean"
          },
          "beforeMeal" : {
            "description" : "True if the reading was taken before a meal, false otherwise.",
            "type" : "boolean"
          },
          "afterMeal" : {
            "description" : "True if the reading was taken after a meal, false otherwise.",
            "type" : "boolean"
          }
        }
      },
      "BloodOxygenReading" : {
        "description" : "This page describes Impilo's blood oxygen reading model.",
        "type" : "object",
        "properties" : {
          "id" : {
            "format" : "int64",
            "description" : "Unique identifier for the reading.",
            "type" : "integer"
          },
          "patient" : {
            "description" : "The patient who took the reading.",
            "type" : "object",
            "allOf" : [ {
              "$ref" : "#/components/schemas/Patient"
            } ]
          },
          "item" : {
            "description" : "The item used to take the reading.",
            "type" : "object",
            "allOf" : [ {
              "$ref" : "#/components/schemas/Item"
            } ]
          },
          "device" : {
            "description" : "The device used to take the reading.",
            "type" : "object",
            "allOf" : [ {
              "$ref" : "#/components/schemas/Device"
            } ]
          },
          "readingTimestamp" : {
            "description" : "The timestamp at which the reading was taken.",
            "type" : "string"
          },
          "bloodOxygen" : {
            "format" : "int32",
            "description" : "The blood oxygen (spo2) measurement value.",
            "type" : "integer"
          },
          "heartRate" : {
            "format" : "int32",
            "description" : "The heart rate measurement value.",
            "type" : "integer"
          },
          "manual" : {
            "description" : "True if the reading value was entered manually, false otherwise.",
            "type" : "boolean"
          }
        }
      },
      "BloodPressureReading" : {
        "description" : "This page describes Impilo's blood pressure reading model.",
        "type" : "object",
        "properties" : {
          "id" : {
            "format" : "int64",
            "description" : "Unique identifier for the reading.",
            "type" : "integer"
          },
          "patient" : {
            "description" : "The patient who took the reading.",
            "type" : "object",
            "allOf" : [ {
              "$ref" : "#/components/schemas/Patient"
            } ]
          },
          "item" : {
            "description" : "The item used to take the reading.",
            "type" : "object",
            "allOf" : [ {
              "$ref" : "#/components/schemas/Item"
            } ]
          },
          "device" : {
            "description" : "The device used to take the reading.",
            "type" : "object",
            "allOf" : [ {
              "$ref" : "#/components/schemas/Device"
            } ]
          },
          "readingTimestamp" : {
            "description" : "The timestamp at which the reading was taken.",
            "type" : "string"
          },
          "systolic" : {
            "format" : "int32",
            "description" : "The systolic measurement value.",
            "type" : "integer"
          },
          "diastolic" : {
            "format" : "int32",
            "description" : "The diastolic measurement value.",
            "type" : "integer"
          },
          "heartRate" : {
            "format" : "int32",
            "description" : "The heart rate measurement value.",
            "type" : "integer"
          },
          "manual" : {
            "description" : "True if the reading value was entered manually, false otherwise.",
            "type" : "boolean"
          }
        }
      },
      "Device" : {
        "description" : "A device is an instance of an item. Impilo creates device records for items that are serialized, i.e., items where each individual unit is identified by a serial number, IMEI, or other identifier.",
        "type" : "object",
        "properties" : {
          "id" : {
            "format" : "int64",
            "description" : "Unique identifier for the device, managed by Impilo.",
            "type" : "integer",
            "readOnly" : true,
            "example" : 1
          },
          "item" : {
            "description" : "The manufacturer for this item.",
            "type" : "object",
            "allOf" : [ {
              "$ref" : "#/components/schemas/Item"
            } ]
          },
          "currentStatus" : {
            "description" : "The current status of this device.",
            "type" : "string"
          },
          "used" : {
            "description" : "True if this device is used, false otherwise.",
            "type" : "boolean"
          },
          "currentPatient" : {
            "description" : "The patient currently in possession of this device. Null if this device is not currently with a patient.",
            "type" : "object",
            "allOf" : [ {
              "$ref" : "#/components/schemas/Patient"
            } ]
          },
          "site" : {
            "description" : "The site to which this device is assigned.",
            "type" : "object",
            "allOf" : [ {
              "$ref" : "#/components/schemas/Site"
            } ]
          },
          "lastHealthCheck" : {
            "description" : "Timestamp for the last time Impilo received a signal from this device.",
            "type" : "string"
          },
          "deviceIdentifiers" : {
            "description" : "An array of the device identifiers for this device.",
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/DeviceIdentifier"
            }
          },
          "deviceEvents" : {
            "description" : "An array of the device events for this device.",
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/DeviceEvent"
            }
          },
          "externalIdentifier" : {
            "type" : "string"
          }
        }
      },
      "DeviceAssociationWebhookPayload" : {
        "description" : "The webhook payload sent when a Device is either Associated or Disassociated with a patient.",
        "type" : "object",
        "properties" : {
          "patient" : {
            "description" : "The Patient that the device was either associated with or disassociated from.",
            "type" : "object",
            "allOf" : [ {
              "$ref" : "#/components/schemas/Patient"
            } ]
          },
          "device" : {
            "description" : "The Device that was associated to or disassociated from the provided Patient.",
            "type" : "object",
            "allOf" : [ {
              "$ref" : "#/components/schemas/Device"
            } ]
          },
          "action" : {
            "description" : "The type of association that was performed -- either 'associate' or 'disassociate'.",
            "type" : "string"
          },
          "eventTimestamp" : {
            "description" : "The timestamp of the association event.",
            "type" : "string"
          }
        },
        "x-response-example" : "deviceAssociationWebhookExample"
      },
      "DeviceEvent" : {
        "description" : "A device event represents a significant activity or occurrence detected by the device. Impilo tracks these events to provide insights into device usage and operational status.",
        "type" : "object",
        "properties" : {
          "type" : {
            "description" : "The event type for the Device Event.",
            "type" : "string"
          },
          "eventTimestamp" : {
            "description" : "The timestamp when the Device Event was created.",
            "type" : "string"
          }
        }
      },
      "DeviceIdentifier" : {
        "description" : "A device is an instance of an item. Impilo creates device records for items that are serialized, i.e., items where each individual unit is identified by a serial number, IMEI, or other identifier.",
        "type" : "object",
        "properties" : {
          "type" : {
            "description" : "The type of the Device Identifier.",
            "type" : "string"
          },
          "value" : {
            "description" : "The value of the Device Identifier, based on it's type.",
            "type" : "string"
          }
        }
      },
      "DeviceUpdate" : {
        "description" : "Update request for modifying a device.",
        "type" : "object",
        "properties" : {
          "deviceStatus" : {
            "description" : "Override a device status",
            "enum" : [ "used", "refurbishing", "decommissioned", "shipped", "availableRepacked", "returnedManufacturer", "awaitingShipment", "delivered", "available", "initiated", "withPatient", "availableAtSite", "packed" ],
            "type" : "string",
            "x-fern-enum" : {
              "used" : {
                "description" : "Device is currently in use."
              },
              "refurbishing" : {
                "description" : "Device is being refurbished."
              },
              "decommissioned" : {
                "description" : "Device has been decommissioned."
              },
              "shipped" : {
                "description" : "Device has been shipped."
              },
              "availableRepacked" : {
                "description" : "Device is available and repacked."
              },
              "returnedManufacturer" : {
                "description" : "Device has been returned to the manufacturer."
              },
              "awaitingShipment" : {
                "description" : "Device is awaiting shipment."
              },
              "delivered" : {
                "description" : "Device has been delivered."
              },
              "available" : {
                "description" : "Device is available for use."
              },
              "initiated" : {
                "description" : "Device initialization has been initiated."
              },
              "withPatient" : {
                "description" : "Device is currently with a patient."
              },
              "availableAtSite" : {
                "description" : "Device is available at a site."
              },
              "packed" : {
                "description" : "Device is packed and ready for shipment or use."
              }
            }
          },
          "note" : {
            "description" : "Note explaining the update",
            "type" : "string",
            "example" : "Device decommissioned due to patient relocation."
          }
        }
      },
      "Instant" : {
        "format" : "date-time",
        "type" : "string",
        "example" : 1646928950000
      },
      "Item" : {
        "description" : "An item is any of the supplies handled by Impilo. Examples include medical devices like a blood pressure monitor or weight scale, but the term 'item' also refers to non-medical supplies like AAA batteries and package inserts. A customer catalog is a subset of all items supported by Impilo. This is set during onboarding and may be modified by your account manager at any time. A customer may view the items in their catalog.",
        "type" : "object",
        "properties" : {
          "id" : {
            "format" : "int64",
            "description" : "Unique identifier for the item, managed by Impilo.",
            "type" : "integer",
            "readOnly" : true,
            "example" : 1
          },
          "manufacturer" : {
            "description" : "The manufacturer for this item.",
            "type" : "object",
            "allOf" : [ {
              "$ref" : "#/components/schemas/Manufacturer"
            } ]
          },
          "name" : {
            "description" : "The name for this item.",
            "type" : "string"
          },
          "model" : {
            "description" : "The manufacturer-assigned model for this item.",
            "type" : "string"
          },
          "sku" : {
            "description" : "The Impilo-assigned SKU for this item.",
            "type" : "string"
          }
        }
      },
      "Kit" : {
        "description" : "A kit is a named collection of items that can be ordered as one unit.",
        "type" : "object",
        "properties" : {
          "id" : {
            "format" : "int64",
            "type" : "integer"
          },
          "name" : {
            "description" : "The name of the kit.",
            "type" : "string"
          },
          "archived" : {
            "description" : "True if the kit is archived, false otherwise.",
            "type" : "boolean"
          },
          "kitItems" : {
            "description" : "An array of kit items.",
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/KitItem"
            }
          }
        }
      },
      "KitItem" : {
        "type" : "object",
        "properties" : {
          "item" : {
            "$ref" : "#/components/schemas/Item"
          },
          "count" : {
            "format" : "int32",
            "type" : "integer"
          }
        }
      },
      "Manufacturer" : {
        "description" : "A manufacturer is a supplier of an item. Every item has exactly one manufacturer.",
        "type" : "object",
        "properties" : {
          "id" : {
            "format" : "int64",
            "description" : "Unique identifier for the manufacturer, managed by Impilo.",
            "type" : "integer",
            "readOnly" : true,
            "example" : 1
          },
          "name" : {
            "description" : "The name of the manufacturer.",
            "type" : "string"
          }
        }
      },
      "Order" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "format" : "int64",
            "description" : "Unique identifier for the order",
            "type" : "integer",
            "readOnly" : true
          },
          "externalOrderIds" : {
            "description" : "An array of order ids specified by the client",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "patient" : {
            "description" : "The patient receiving the order. Exactly one of patient or site must be not null.",
            "type" : "object",
            "allOf" : [ {
              "$ref" : "#/components/schemas/Patient"
            } ]
          },
          "site" : {
            "description" : "The site receiving the order. Exactly one of patient or site must be not null.",
            "type" : "object",
            "allOf" : [ {
              "$ref" : "#/components/schemas/Site"
            } ]
          },
          "currentStatus" : {
            "description" : "The current status of the order",
            "enum" : [ "reconfirmAddress", "shipped", "voided", "returnIssued", "delivered", "orderPlaced", "awaitingShipment", "pendingAdditionalInformation", "unableToFulfill", "onHold", "pendingInventory", "unsuccessfulDelivery" ],
            "type" : "string",
            "readOnly" : true,
            "x-fern-enum" : {
              "reconfirmAddress" : {
                "description" : "Customer needs to reconfirm their address."
              },
              "shipped" : {
                "description" : "Order has been shipped to the recipient."
              },
              "voided" : {
                "description" : "Order has been canceled and is no longer valid."
              },
              "returnIssued" : {
                "description" : "A return process has been initiated for the order."
              },
              "delivered" : {
                "description" : "Order has been successfully delivered to the recipient."
              },
              "orderPlaced" : {
                "description" : "Order has been successfully placed and is in the system."
              },
              "awaitingShipment" : {
                "description" : "Order is ready to be shipped but is waiting for the next shipment cycle."
              },
              "pendingAdditionalInformation" : {
                "description" : "Order is pending as additional information is required from the recipient."
              },
              "unableToFulfill" : {
                "description" : "Order cannot be fulfilled due to current limitations or issues."
              },
              "onHold" : {
                "description" : "Order is on hold, possibly due to inventory or internal reviews."
              },
              "pendingInventory" : {
                "description" : "Order is waiting for inventory to become available before it can be fulfilled."
              },
              "unsuccessfulDelivery" : {
                "description" : "Delivery of the order was attempted but unsuccessful."
              }
            }
          },
          "orderItems" : {
            "description" : "Array of items on the order. At least one of orderItems or orderKits must be not null.",
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/OrderItem"
            }
          },
          "orderKits" : {
            "description" : "Array of order kits on the order. At least one of orderItems or orderKits must be not null.",
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/OrderKit"
            }
          },
          "orderEvents" : {
            "description" : "Array of order events. These are the status updates for the order.",
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/OrderEvent"
            },
            "readOnly" : true
          },
          "trackingNumbers" : {
            "description" : "Array of tracking numbers for the order.",
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TrackingNumber"
            },
            "readOnly" : true
          },
          "devices" : {
            "description" : "The order item devices",
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Device"
            },
            "readOnly" : true
          },
          "packedKits" : {
            "description" : "The kits packed in the order",
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PackedKit"
            },
            "readOnly" : true
          }
        }
      },
      "OrderEvent" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "eventTimestamp" : {
            "type" : "string"
          }
        }
      },
      "OrderItem" : {
        "type" : "object",
        "properties" : {
          "item" : {
            "$ref" : "#/components/schemas/Item"
          },
          "count" : {
            "format" : "int32",
            "type" : "integer"
          }
        }
      },
      "OrderKit" : {
        "type" : "object",
        "properties" : {
          "kit" : {
            "$ref" : "#/components/schemas/Kit"
          },
          "count" : {
            "format" : "int32",
            "type" : "integer"
          }
        }
      },
      "PackedKit" : {
        "type" : "object",
        "properties" : {
          "kit" : {
            "$ref" : "#/components/schemas/Kit"
          },
          "devices" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Device"
            }
          }
        }
      },
      "Page" : {
        "description" : "Pagination is supported whenever an API response returns a list of objects. In paginated responses, objects are nested in a content attribute and have first and last attributes indicating whether you are on the first or last page, respectively. Additionally, the pagination response includes a page attribute indicating the current page number, a size attribute indicating the current page size, and a total attribute indicating the number of objects matching the request.",
        "type" : "object",
        "properties" : {
          "content" : {
            "description" : "The content of the page, consisting of a list of objects.",
            "type" : "array",
            "items" : { }
          },
          "page" : {
            "format" : "int32",
            "description" : "The current page number. The first page has value 1.",
            "type" : "integer"
          },
          "size" : {
            "format" : "int32",
            "description" : "The current page size. Default 15, maximum 250.",
            "type" : "integer"
          },
          "total" : {
            "format" : "int32",
            "description" : "The number of objects matching the request.",
            "type" : "integer"
          },
          "first" : {
            "description" : "True if this is the first page, false otherwise.",
            "type" : "boolean"
          },
          "last" : {
            "description" : "True if this is the last page, false otherwise.",
            "type" : "boolean"
          }
        }
      },
      "PageBloodGlucoseReading" : {
        "description" : "Pagination is supported whenever an API response returns a list of objects. In paginated responses, objects are nested in a content attribute and have first and last attributes indicating whether you are on the first or last page, respectively. Additionally, the pagination response includes a page attribute indicating the current page number, a size attribute indicating the current page size, and a total attribute indicating the number of objects matching the request.",
        "type" : "object",
        "properties" : {
          "content" : {
            "description" : "The content of the page, consisting of a list of objects.",
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/BloodGlucoseReading"
            }
          },
          "page" : {
            "format" : "int32",
            "description" : "The current page number. The first page has value 1.",
            "type" : "integer"
          },
          "size" : {
            "format" : "int32",
            "description" : "The current page size. Default 15, maximum 250.",
            "type" : "integer"
          },
          "total" : {
            "format" : "int32",
            "description" : "The number of objects matching the request.",
            "type" : "integer"
          },
          "first" : {
            "description" : "True if this is the first page, false otherwise.",
            "type" : "boolean"
          },
          "last" : {
            "description" : "True if this is the last page, false otherwise.",
            "type" : "boolean"
          }
        }
      },
      "PageBloodOxygenReading" : {
        "description" : "Pagination is supported whenever an API response returns a list of objects. In paginated responses, objects are nested in a content attribute and have first and last attributes indicating whether you are on the first or last page, respectively. Additionally, the pagination response includes a page attribute indicating the current page number, a size attribute indicating the current page size, and a total attribute indicating the number of objects matching the request.",
        "type" : "object",
        "properties" : {
          "content" : {
            "description" : "The content of the page, consisting of a list of objects.",
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/BloodOxygenReading"
            }
          },
          "page" : {
            "format" : "int32",
            "description" : "The current page number. The first page has value 1.",
            "type" : "integer"
          },
          "size" : {
            "format" : "int32",
            "description" : "The current page size. Default 15, maximum 250.",
            "type" : "integer"
          },
          "total" : {
            "format" : "int32",
            "description" : "The number of objects matching the request.",
            "type" : "integer"
          },
          "first" : {
            "description" : "True if this is the first page, false otherwise.",
            "type" : "boolean"
          },
          "last" : {
            "description" : "True if this is the last page, false otherwise.",
            "type" : "boolean"
          }
        }
      },
      "PageBloodPressureReading" : {
        "description" : "Pagination is supported whenever an API response returns a list of objects. In paginated responses, objects are nested in a content attribute and have first and last attributes indicating whether you are on the first or last page, respectively. Additionally, the pagination response includes a page attribute indicating the current page number, a size attribute indicating the current page size, and a total attribute indicating the number of objects matching the request.",
        "type" : "object",
        "properties" : {
          "content" : {
            "description" : "The content of the page, consisting of a list of objects.",
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/BloodPressureReading"
            }
          },
          "page" : {
            "format" : "int32",
            "description" : "The current page number. The first page has value 1.",
            "type" : "integer"
          },
          "size" : {
            "format" : "int32",
            "description" : "The current page size. Default 15, maximum 250.",
            "type" : "integer"
          },
          "total" : {
            "format" : "int32",
            "description" : "The number of objects matching the request.",
            "type" : "integer"
          },
          "first" : {
            "description" : "True if this is the first page, false otherwise.",
            "type" : "boolean"
          },
          "last" : {
            "description" : "True if this is the last page, false otherwise.",
            "type" : "boolean"
          }
        }
      },
      "PageDevice" : {
        "description" : "Pagination is supported whenever an API response returns a list of objects. In paginated responses, objects are nested in a content attribute and have first and last attributes indicating whether you are on the first or last page, respectively. Additionally, the pagination response includes a page attribute indicating the current page number, a size attribute indicating the current page size, and a total attribute indicating the number of objects matching the request.",
        "type" : "object",
        "properties" : {
          "content" : {
            "description" : "The content of the page, consisting of a list of objects.",
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Device"
            }
          },
          "page" : {
            "format" : "int32",
            "description" : "The current page number. The first page has value 1.",
            "type" : "integer"
          },
          "size" : {
            "format" : "int32",
            "description" : "The current page size. Default 15, maximum 250.",
            "type" : "integer"
          },
          "total" : {
            "format" : "int32",
            "description" : "The number of objects matching the request.",
            "type" : "integer"
          },
          "first" : {
            "description" : "True if this is the first page, false otherwise.",
            "type" : "boolean"
          },
          "last" : {
            "description" : "True if this is the last page, false otherwise.",
            "type" : "boolean"
          }
        }
      },
      "PageItem" : {
        "description" : "Pagination is supported whenever an API response returns a list of objects. In paginated responses, objects are nested in a content attribute and have first and last attributes indicating whether you are on the first or last page, respectively. Additionally, the pagination response includes a page attribute indicating the current page number, a size attribute indicating the current page size, and a total attribute indicating the number of objects matching the request.",
        "type" : "object",
        "properties" : {
          "content" : {
            "description" : "The content of the page, consisting of a list of objects.",
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Item"
            }
          },
          "page" : {
            "format" : "int32",
            "description" : "The current page number. The first page has value 1.",
            "type" : "integer"
          },
          "size" : {
            "format" : "int32",
            "description" : "The current page size. Default 15, maximum 250.",
            "type" : "integer"
          },
          "total" : {
            "format" : "int32",
            "description" : "The number of objects matching the request.",
            "type" : "integer"
          },
          "first" : {
            "description" : "True if this is the first page, false otherwise.",
            "type" : "boolean"
          },
          "last" : {
            "description" : "True if this is the last page, false otherwise.",
            "type" : "boolean"
          }
        }
      },
      "PageKit" : {
        "description" : "Pagination is supported whenever an API response returns a list of objects. In paginated responses, objects are nested in a content attribute and have first and last attributes indicating whether you are on the first or last page, respectively. Additionally, the pagination response includes a page attribute indicating the current page number, a size attribute indicating the current page size, and a total attribute indicating the number of objects matching the request.",
        "type" : "object",
        "properties" : {
          "content" : {
            "description" : "The content of the page, consisting of a list of objects.",
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Kit"
            }
          },
          "page" : {
            "format" : "int32",
            "description" : "The current page number. The first page has value 1.",
            "type" : "integer"
          },
          "size" : {
            "format" : "int32",
            "description" : "The current page size. Default 15, maximum 250.",
            "type" : "integer"
          },
          "total" : {
            "format" : "int32",
            "description" : "The number of objects matching the request.",
            "type" : "integer"
          },
          "first" : {
            "description" : "True if this is the first page, false otherwise.",
            "type" : "boolean"
          },
          "last" : {
            "description" : "True if this is the last page, false otherwise.",
            "type" : "boolean"
          }
        }
      },
      "PageManufacturer" : {
        "description" : "Pagination is supported whenever an API response returns a list of objects. In paginated responses, objects are nested in a content attribute and have first and last attributes indicating whether you are on the first or last page, respectively. Additionally, the pagination response includes a page attribute indicating the current page number, a size attribute indicating the current page size, and a total attribute indicating the number of objects matching the request.",
        "type" : "object",
        "properties" : {
          "content" : {
            "description" : "The content of the page, consisting of a list of objects.",
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Manufacturer"
            }
          },
          "page" : {
            "format" : "int32",
            "description" : "The current page number. The first page has value 1.",
            "type" : "integer"
          },
          "size" : {
            "format" : "int32",
            "description" : "The current page size. Default 15, maximum 250.",
            "type" : "integer"
          },
          "total" : {
            "format" : "int32",
            "description" : "The number of objects matching the request.",
            "type" : "integer"
          },
          "first" : {
            "description" : "True if this is the first page, false otherwise.",
            "type" : "boolean"
          },
          "last" : {
            "description" : "True if this is the last page, false otherwise.",
            "type" : "boolean"
          }
        }
      },
      "PageOrder" : {
        "description" : "Pagination is supported whenever an API response returns a list of objects. In paginated responses, objects are nested in a content attribute and have first and last attributes indicating whether you are on the first or last page, respectively. Additionally, the pagination response includes a page attribute indicating the current page number, a size attribute indicating the current page size, and a total attribute indicating the number of objects matching the request.",
        "type" : "object",
        "properties" : {
          "content" : {
            "description" : "The content of the page, consisting of a list of objects.",
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Order"
            }
          },
          "page" : {
            "format" : "int32",
            "description" : "The current page number. The first page has value 1.",
            "type" : "integer"
          },
          "size" : {
            "format" : "int32",
            "description" : "The current page size. Default 15, maximum 250.",
            "type" : "integer"
          },
          "total" : {
            "format" : "int32",
            "description" : "The number of objects matching the request.",
            "type" : "integer"
          },
          "first" : {
            "description" : "True if this is the first page, false otherwise.",
            "type" : "boolean"
          },
          "last" : {
            "description" : "True if this is the last page, false otherwise.",
            "type" : "boolean"
          }
        }
      },
      "PagePatient" : {
        "description" : "Pagination is supported whenever an API response returns a list of objects. In paginated responses, objects are nested in a content attribute and have first and last attributes indicating whether you are on the first or last page, respectively. Additionally, the pagination response includes a page attribute indicating the current page number, a size attribute indicating the current page size, and a total attribute indicating the number of objects matching the request.",
        "type" : "object",
        "properties" : {
          "content" : {
            "description" : "The content of the page, consisting of a list of objects.",
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Patient"
            }
          },
          "page" : {
            "format" : "int32",
            "description" : "The current page number. The first page has value 1.",
            "type" : "integer"
          },
          "size" : {
            "format" : "int32",
            "description" : "The current page size. Default 15, maximum 250.",
            "type" : "integer"
          },
          "total" : {
            "format" : "int32",
            "description" : "The number of objects matching the request.",
            "type" : "integer"
          },
          "first" : {
            "description" : "True if this is the first page, false otherwise.",
            "type" : "boolean"
          },
          "last" : {
            "description" : "True if this is the last page, false otherwise.",
            "type" : "boolean"
          }
        }
      },
      "PageSite" : {
        "description" : "Pagination is supported whenever an API response returns a list of objects. In paginated responses, objects are nested in a content attribute and have first and last attributes indicating whether you are on the first or last page, respectively. Additionally, the pagination response includes a page attribute indicating the current page number, a size attribute indicating the current page size, and a total attribute indicating the number of objects matching the request.",
        "type" : "object",
        "properties" : {
          "content" : {
            "description" : "The content of the page, consisting of a list of objects.",
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Site"
            }
          },
          "page" : {
            "format" : "int32",
            "description" : "The current page number. The first page has value 1.",
            "type" : "integer"
          },
          "size" : {
            "format" : "int32",
            "description" : "The current page size. Default 15, maximum 250.",
            "type" : "integer"
          },
          "total" : {
            "format" : "int32",
            "description" : "The number of objects matching the request.",
            "type" : "integer"
          },
          "first" : {
            "description" : "True if this is the first page, false otherwise.",
            "type" : "boolean"
          },
          "last" : {
            "description" : "True if this is the last page, false otherwise.",
            "type" : "boolean"
          }
        }
      },
      "PageTemperatureReading" : {
        "description" : "Pagination is supported whenever an API response returns a list of objects. In paginated responses, objects are nested in a content attribute and have first and last attributes indicating whether you are on the first or last page, respectively. Additionally, the pagination response includes a page attribute indicating the current page number, a size attribute indicating the current page size, and a total attribute indicating the number of objects matching the request.",
        "type" : "object",
        "properties" : {
          "content" : {
            "description" : "The content of the page, consisting of a list of objects.",
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TemperatureReading"
            }
          },
          "page" : {
            "format" : "int32",
            "description" : "The current page number. The first page has value 1.",
            "type" : "integer"
          },
          "size" : {
            "format" : "int32",
            "description" : "The current page size. Default 15, maximum 250.",
            "type" : "integer"
          },
          "total" : {
            "format" : "int32",
            "description" : "The number of objects matching the request.",
            "type" : "integer"
          },
          "first" : {
            "description" : "True if this is the first page, false otherwise.",
            "type" : "boolean"
          },
          "last" : {
            "description" : "True if this is the last page, false otherwise.",
            "type" : "boolean"
          }
        }
      },
      "PageWebhook" : {
        "description" : "Pagination is supported whenever an API response returns a list of objects. In paginated responses, objects are nested in a content attribute and have first and last attributes indicating whether you are on the first or last page, respectively. Additionally, the pagination response includes a page attribute indicating the current page number, a size attribute indicating the current page size, and a total attribute indicating the number of objects matching the request.",
        "type" : "object",
        "properties" : {
          "content" : {
            "description" : "The content of the page, consisting of a list of objects.",
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Webhook"
            }
          },
          "page" : {
            "format" : "int32",
            "description" : "The current page number. The first page has value 1.",
            "type" : "integer"
          },
          "size" : {
            "format" : "int32",
            "description" : "The current page size. Default 15, maximum 250.",
            "type" : "integer"
          },
          "total" : {
            "format" : "int32",
            "description" : "The number of objects matching the request.",
            "type" : "integer"
          },
          "first" : {
            "description" : "True if this is the first page, false otherwise.",
            "type" : "boolean"
          },
          "last" : {
            "description" : "True if this is the last page, false otherwise.",
            "type" : "boolean"
          }
        }
      },
      "PageWebhookLog" : {
        "description" : "Pagination is supported whenever an API response returns a list of objects. In paginated responses, objects are nested in a content attribute and have first and last attributes indicating whether you are on the first or last page, respectively. Additionally, the pagination response includes a page attribute indicating the current page number, a size attribute indicating the current page size, and a total attribute indicating the number of objects matching the request.",
        "type" : "object",
        "properties" : {
          "content" : {
            "description" : "The content of the page, consisting of a list of objects.",
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/WebhookLog"
            }
          },
          "page" : {
            "format" : "int32",
            "description" : "The current page number. The first page has value 1.",
            "type" : "integer"
          },
          "size" : {
            "format" : "int32",
            "description" : "The current page size. Default 15, maximum 250.",
            "type" : "integer"
          },
          "total" : {
            "format" : "int32",
            "description" : "The number of objects matching the request.",
            "type" : "integer"
          },
          "first" : {
            "description" : "True if this is the first page, false otherwise.",
            "type" : "boolean"
          },
          "last" : {
            "description" : "True if this is the last page, false otherwise.",
            "type" : "boolean"
          }
        }
      },
      "PageWeightReading" : {
        "description" : "Pagination is supported whenever an API response returns a list of objects. In paginated responses, objects are nested in a content attribute and have first and last attributes indicating whether you are on the first or last page, respectively. Additionally, the pagination response includes a page attribute indicating the current page number, a size attribute indicating the current page size, and a total attribute indicating the number of objects matching the request.",
        "type" : "object",
        "properties" : {
          "content" : {
            "description" : "The content of the page, consisting of a list of objects.",
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/WeightReading"
            }
          },
          "page" : {
            "format" : "int32",
            "description" : "The current page number. The first page has value 1.",
            "type" : "integer"
          },
          "size" : {
            "format" : "int32",
            "description" : "The current page size. Default 15, maximum 250.",
            "type" : "integer"
          },
          "total" : {
            "format" : "int32",
            "description" : "The number of objects matching the request.",
            "type" : "integer"
          },
          "first" : {
            "description" : "True if this is the first page, false otherwise.",
            "type" : "boolean"
          },
          "last" : {
            "description" : "True if this is the last page, false otherwise.",
            "type" : "boolean"
          }
        }
      },
      "Patient" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "format" : "int64",
            "description" : "Unique identifier for the patient, managed by Impilo.",
            "type" : "integer",
            "readOnly" : true,
            "example" : 1
          },
          "externalIdentifier" : {
            "description" : "Unique external identifier for the patient, managed by the customer.",
            "type" : "string",
            "example" : "1234abcd"
          },
          "firstName" : {
            "description" : "The patient's first name.",
            "type" : "string",
            "example" : "John"
          },
          "lastName" : {
            "description" : "The patient's last name.",
            "type" : "string",
            "example" : "Doe"
          },
          "dateOfBirth" : {
            "format" : "date",
            "description" : "The patient's date of birth in the format YYYY-MM-DD.",
            "type" : "string",
            "example" : 315532800000
          },
          "email" : {
            "format" : "email",
            "description" : "The patient's email.",
            "type" : "string",
            "example" : "john.doe@example.com"
          },
          "phoneNumber" : {
            "description" : "The patient's phone number.",
            "type" : "string",
            "example" : "+1234567890"
          },
          "archived" : {
            "description" : "True if the patient is archived, false otherwise.",
            "type" : "boolean",
            "example" : true
          },
          "address" : {
            "description" : "The patient's shipping address.",
            "type" : "object",
            "allOf" : [ {
              "$ref" : "#/components/schemas/Address"
            } ]
          },
          "site" : {
            "description" : "The site responsible for this patient.",
            "type" : "object",
            "allOf" : [ {
              "$ref" : "#/components/schemas/Site"
            } ]
          },
          "enrolled" : {
            "description" : "The enrollment status. False if disenrolled.",
            "type" : "boolean"
          },
          "sex" : {
            "description" : "Sex",
            "type" : "string",
            "allOf" : [ {
              "$ref" : "#/components/schemas/Sex"
            } ],
            "example" : "female"
          }
        }
      },
      "Record" : {
        "description" : "Record implementation of DeviceUpdate",
        "type" : "object",
        "properties" : {
          "deviceStatus" : {
            "description" : "Override a device status",
            "enum" : [ "used", "refurbishing", "decommissioned", "shipped", "availableRepacked", "returnedManufacturer", "awaitingShipment", "delivered", "available", "initiated", "withPatient", "availableAtSite", "packed" ],
            "type" : "string",
            "x-fern-enum" : {
              "used" : {
                "description" : "Device is currently in use."
              },
              "refurbishing" : {
                "description" : "Device is being refurbished."
              },
              "decommissioned" : {
                "description" : "Device has been decommissioned."
              },
              "shipped" : {
                "description" : "Device has been shipped."
              },
              "availableRepacked" : {
                "description" : "Device is available and repacked."
              },
              "returnedManufacturer" : {
                "description" : "Device has been returned to the manufacturer."
              },
              "awaitingShipment" : {
                "description" : "Device is awaiting shipment."
              },
              "delivered" : {
                "description" : "Device has been delivered."
              },
              "available" : {
                "description" : "Device is available for use."
              },
              "initiated" : {
                "description" : "Device initialization has been initiated."
              },
              "withPatient" : {
                "description" : "Device is currently with a patient."
              },
              "availableAtSite" : {
                "description" : "Device is available at a site."
              },
              "packed" : {
                "description" : "Device is packed and ready for shipment or use."
              }
            }
          },
          "note" : {
            "description" : "Note explaining the update",
            "type" : "string",
            "example" : "Device decommissioned due to patient relocation."
          }
        }
      },
      "Return" : {
        "description" : "A return is an occurrence of a device(s) or non-tracked item(s) being returned by a Patient.",
        "type" : "object",
        "properties" : {
          "id" : {
            "format" : "int64",
            "description" : "Unique identifier for the return, managed by Impilo.",
            "type" : "integer",
            "readOnly" : true,
            "example" : 1
          },
          "patient" : {
            "description" : "The patient that is making the return.",
            "type" : "object",
            "allOf" : [ {
              "$ref" : "#/components/schemas/Patient"
            } ]
          },
          "currentStatus" : {
            "description" : "The current status of this return.",
            "type" : "string"
          },
          "returnItems" : {
            "description" : "An array of non-tracked items expected on this return.",
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ReturnItem"
            }
          },
          "returnEvents" : {
            "description" : "An array of the return events for this return.",
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ReturnEvent"
            }
          },
          "trackingNumbers" : {
            "description" : "An array of tracking numbers associated with this return.",
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TrackingNumber"
            }
          },
          "returnDevices" : {
            "description" : "An array of devices expected on this return.",
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Device"
            }
          },
          "relatedOrderId" : {
            "format" : "int64",
            "description" : "The identifier of a related order, if exists.",
            "type" : "integer"
          }
        }
      },
      "ReturnEvent" : {
        "type" : "object",
        "properties" : {
          "type" : {
            "description" : "The event type for the Return Event.",
            "type" : "string"
          },
          "eventTimestamp" : {
            "description" : "The timestamp when the Return Event was created.",
            "type" : "string"
          }
        }
      },
      "ReturnItem" : {
        "type" : "object",
        "properties" : {
          "item" : {
            "description" : "The item type extected on this return.",
            "type" : "object",
            "allOf" : [ {
              "$ref" : "#/components/schemas/Item"
            } ]
          },
          "count" : {
            "format" : "int32",
            "description" : "The quantity of this item type expected on this return.",
            "type" : "integer"
          }
        }
      },
      "Sex" : {
        "enum" : [ "unknown", "female", "male", "other" ],
        "type" : "string"
      },
      "Site" : {
        "description" : "A site is a customer-managed location that interacts with Impilo's services. Patient may be associated with a site, and a customer may order items and hold inventory at a site.",
        "type" : "object",
        "properties" : {
          "id" : {
            "format" : "int64",
            "description" : "Unique identifier for the site, managed by Impilo.",
            "type" : "integer",
            "readOnly" : true,
            "example" : 1
          },
          "name" : {
            "description" : "The name of the site.",
            "type" : "string"
          },
          "active" : {
            "description" : "True if the site is active, false otherwise.",
            "type" : "boolean"
          },
          "address" : {
            "description" : "The shipping address for the site.",
            "type" : "object",
            "allOf" : [ {
              "$ref" : "#/components/schemas/Address"
            } ]
          }
        }
      },
      "TemperatureReading" : {
        "description" : "This page describes Impilo's temperature reading model.",
        "type" : "object",
        "properties" : {
          "id" : {
            "format" : "int64",
            "description" : "Unique identifier for the reading.",
            "type" : "integer"
          },
          "patient" : {
            "description" : "The patient who took the reading.",
            "type" : "object",
            "allOf" : [ {
              "$ref" : "#/components/schemas/Patient"
            } ]
          },
          "item" : {
            "description" : "The item used to take the reading.",
            "type" : "object",
            "allOf" : [ {
              "$ref" : "#/components/schemas/Item"
            } ]
          },
          "device" : {
            "description" : "The device used to take the reading.",
            "type" : "object",
            "allOf" : [ {
              "$ref" : "#/components/schemas/Device"
            } ]
          },
          "temperatureUnit" : {
            "description" : "The unit in which the temperature was measured.",
            "type" : "string"
          },
          "temperature" : {
            "format" : "double",
            "description" : "The temperature measurement value.",
            "type" : "number"
          },
          "readingTimestamp" : {
            "description" : "The timestamp at which the reading was taken.",
            "type" : "string"
          }
        }
      },
      "TestBloodGlucoseWebhookRequest" : {
        "type" : "object",
        "properties" : {
          "patientId" : {
            "format" : "int64",
            "type" : "integer"
          },
          "glucose" : {
            "format" : "int32",
            "type" : "integer"
          }
        }
      },
      "TestBloodOxygenWebhookRequest" : {
        "type" : "object",
        "properties" : {
          "patientId" : {
            "format" : "int64",
            "type" : "integer"
          },
          "bloodOxygen" : {
            "format" : "int32",
            "type" : "integer"
          },
          "heartRate" : {
            "format" : "int32",
            "type" : "integer"
          }
        }
      },
      "TestBloodPressureWebhookRequest" : {
        "type" : "object",
        "properties" : {
          "patientId" : {
            "format" : "int64",
            "type" : "integer"
          },
          "systolic" : {
            "format" : "int32",
            "type" : "integer"
          },
          "diastolic" : {
            "format" : "int32",
            "type" : "integer"
          },
          "heartRate" : {
            "format" : "int32",
            "type" : "integer"
          }
        }
      },
      "TestDeviceAssociationWebhook" : {
        "type" : "object",
        "properties" : {
          "patientId" : {
            "format" : "int64",
            "type" : "integer"
          },
          "deviceId" : {
            "format" : "int64",
            "type" : "integer"
          },
          "deviceIdentifier" : {
            "type" : "string"
          }
        }
      },
      "TestOrderStatusFullWebhook" : {
        "type" : "object",
        "properties" : {
          "orderId" : {
            "format" : "int64",
            "type" : "integer"
          },
          "externalOrderIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "patientId" : {
            "format" : "int64",
            "type" : "integer"
          },
          "orderStatus" : {
            "type" : "string"
          },
          "trackingNumber" : {
            "type" : "string"
          }
        }
      },
      "TestOrderStatusWebhookRequest" : {
        "required" : [ "orderStatusName" ],
        "type" : "object",
        "properties" : {
          "orderId" : {
            "format" : "int64",
            "description" : "Unique identifier for the order, managed by Impilo. Randomly generated for test webhooks.",
            "type" : "integer",
            "readOnly" : true,
            "example" : 1
          },
          "externalOrderIds" : {
            "description" : "List of order ids",
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "example" : [ 1, 2 ]
          },
          "orderStatusName" : {
            "description" : "Order status name",
            "type" : "string",
            "example" : "ORDER_PLACED"
          }
        }
      },
      "TestWeightWebhookRequest" : {
        "type" : "object",
        "properties" : {
          "patientId" : {
            "format" : "int64",
            "type" : "integer"
          },
          "weight" : {
            "format" : "double",
            "type" : "number"
          }
        }
      },
      "TrackingNumber" : {
        "description" : "The tracking number model includes details about the shipping carrier and the tracking number value.",
        "type" : "object",
        "properties" : {
          "carrier" : {
            "description" : "The shipping carrier for this tracking number.",
            "type" : "string"
          },
          "value" : {
            "description" : "The tracking number value.",
            "type" : "string"
          }
        }
      },
      "ValidateDeviceResponse" : {
        "type" : "object",
        "properties" : {
          "valid" : {
            "description" : "A Boolean value of whether this device identifier is validated or not.",
            "type" : "boolean"
          },
          "device" : {
            "description" : "The Device associated with the provided Device Identifier, if exists.",
            "type" : "object",
            "allOf" : [ {
              "$ref" : "#/components/schemas/Device"
            } ]
          }
        }
      },
      "Webhook" : {
        "description" : "Impilo supports various types of webhooks. This page describes the endpoints available for managing your webhooks.",
        "required" : [ "type", "url" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "format" : "int64",
            "description" : "Unique identifier for the webhook managed by Impilo.",
            "type" : "integer",
            "readOnly" : true,
            "example" : 1
          },
          "type" : {
            "description" : "The event type for the webhook.",
            "type" : "string",
            "example" : "eventType"
          },
          "url" : {
            "description" : "The URL where events for this webhook will be sent.",
            "type" : "string",
            "example" : "http://example.com"
          }
        }
      },
      "WebhookLog" : {
        "description" : "Represents a log for a webhook.",
        "type" : "object",
        "properties" : {
          "webhookId" : {
            "format" : "int64",
            "description" : "ID of the webhook",
            "type" : "integer",
            "example" : 1
          },
          "webhookType" : {
            "description" : "Type of the webhook",
            "type" : "string",
            "allOf" : [ {
              "$ref" : "#/components/schemas/WebhookType"
            } ],
            "example" : "order.status"
          },
          "webhookUrl" : {
            "description" : "URL of the webhook",
            "type" : "string",
            "example" : "http://webhookserver.com"
          },
          "payload" : {
            "description" : "Payload sent with the webhook",
            "type" : "string",
            "example" : "{'id':1234}"
          },
          "createTimestamp" : {
            "format" : "date-time",
            "description" : "Timestamp when the webhook was sent",
            "type" : "string",
            "example" : 1692713730345
          },
          "lastResponseStatus" : {
            "format" : "int32",
            "description" : "Last response status for the webhook",
            "type" : "integer",
            "example" : 200
          },
          "retryAttempts" : {
            "format" : "int32",
            "description" : "Number of retry attempts for the webhook",
            "type" : "integer",
            "example" : 3
          },
          "lastRetryTimestamp" : {
            "format" : "date-time",
            "description" : "Timestamp of the last retry attempt for the webhook",
            "type" : "string",
            "example" : 1692713730345
          }
        }
      },
      "WebhookPayload" : {
        "description" : "Impilo supports various types of webhooks. This page describes the endpoints available for managing your webhooks.",
        "type" : "object",
        "properties" : {
          "id" : {
            "format" : "int64",
            "description" : "Unique identifier for the webhook payload, managed by Impilo.",
            "type" : "integer",
            "readOnly" : true,
            "example" : 1
          },
          "type" : {
            "description" : "The event type for the webhook.",
            "type" : "string"
          },
          "payload" : {
            "description" : "The payload of the webhook."
          }
        }
      },
      "WebhookSecret" : {
        "type" : "object",
        "properties" : {
          "secret" : {
            "description" : "Secret we will pass along with any Webhooks we send to your subscribed endpoints.",
            "type" : "string"
          }
        }
      },
      "WebhookType" : {
        "enum" : [ "device.associationCreated", "device.associationRemoved", "device.lowBattery", "device.weakSignal", "order.status", "order.statusFull", "patient.created", "patient.updated", "reading.bloodGlucose", "reading.bloodOxygen", "reading.bloodPressure", "reading.temperature", "reading.weight", "return.status", "return.statusFull", "supportTicket.event" ],
        "type" : "string",
        "x-fern-enum" : {
          "device.associationCreated" : {
            "description" : "A patient-device association was created."
          },
          "device.associationRemoved" : {
            "description" : "A patient-device association was removed."
          },
          "device.lowBattery" : {
            "description" : "A device sent a low battery signal."
          },
          "device.weakSignal" : {
            "description" : "A device sent a weak signal."
          },
          "order.status" : {
            "description" : "An order status event occurred. The payload only includes order id and order event type."
          },
          "order.statusFull" : {
            "description" : "An order status event occurred. The payload includes the full order model."
          },
          "patient.created" : {
            "description" : "A new patient was created."
          },
          "patient.updated" : {
            "description" : "A patient’s details were updated."
          },
          "reading.bloodGlucose" : {
            "description" : "A reading of blood glucose was taken."
          },
          "reading.bloodOxygen" : {
            "description" : "A reading of blood oxygen was taken."
          },
          "reading.bloodPressure" : {
            "description" : "A reading of blood pressure was taken."
          },
          "reading.temperature" : {
            "description" : "A body temperature reading was taken."
          },
          "reading.weight" : {
            "description" : "A body weight reading was taken."
          },
          "return.status" : {
            "description" : "A return status event was triggered."
          },
          "return.statusFull" : {
            "description" : "A return status event was triggered."
          },
          "supportTicket.event" : {
            "description" : "A support ticket event took place."
          }
        }
      },
      "WeightReading" : {
        "description" : "This page describes Impilo's weight reading model.",
        "required" : [ "weight" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "format" : "int64",
            "description" : "Unique identifier for the reading.",
            "type" : "integer"
          },
          "patient" : {
            "description" : "The patient who took the reading.",
            "type" : "object",
            "allOf" : [ {
              "$ref" : "#/components/schemas/Patient"
            } ]
          },
          "item" : {
            "description" : "The item used to take the reading.",
            "type" : "object",
            "allOf" : [ {
              "$ref" : "#/components/schemas/Item"
            } ]
          },
          "device" : {
            "description" : "The device used to take the reading.",
            "type" : "object",
            "allOf" : [ {
              "$ref" : "#/components/schemas/Device"
            } ]
          },
          "readingTimestamp" : {
            "description" : "The timestamp at which the reading was taken.",
            "type" : "string"
          },
          "weight" : {
            "format" : "double",
            "description" : "The weight reading in lbs.",
            "minimum" : 0,
            "type" : "number"
          },
          "manual" : {
            "description" : "True if the reading value was entered manually, false otherwise.",
            "type" : "boolean"
          }
        }
      }
    }
  }
}